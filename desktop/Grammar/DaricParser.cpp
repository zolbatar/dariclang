
// Generated from Daric.g4 by ANTLR 4.11.1


#include "DaricVisitor.h"

#include "DaricParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct DaricParserStaticData final {
  DaricParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  DaricParserStaticData(const DaricParserStaticData&) = delete;
  DaricParserStaticData(DaricParserStaticData&&) = delete;
  DaricParserStaticData& operator=(const DaricParserStaticData&) = delete;
  DaricParserStaticData& operator=(DaricParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag daricParserOnceFlag;
DaricParserStaticData *daricParserStaticData = nullptr;

void daricParserInitialize() {
  assert(daricParserStaticData == nullptr);
  auto staticData = std::make_unique<DaricParserStaticData>(
    std::vector<std::string>{
      "program", "statements", "statementsl", "statement", "separator", 
      "assign", "call", "case", "const", "data", "dataLabel", "dim", "exprcall", 
      "end", "for", "importlib", "if", "ifml", "input", "option", "parameter", 
      "print", "procedure", "repeat", "read", "restore", "return", "struct", 
      "swap", "when", "while", "clear", "get", "set", "variable", "typeSignatureSingle", 
      "typeSignatureArray", "typeSignatureRecord", "typeSignatureRecordArray", 
      "typeSignatureArrayNew", "typeSignatureRecordNew", "typeSignatureRecordArrayNew", 
      "typeSignatureList", "typeSignatureVector", "typeSignatureSet", "typeSignatureMap", 
      "typeSignatureStack", "typeSignatureQueue", "typeSignature", "typeSignatureArrayOrCollection", 
      "expression", "type", "typeOrStruct", "literal", "floatLiteral", "integerLiteral", 
      "stringLiteral"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'$'", 
      "'#'", "':'", "';'", "'.'", "','", "'''", "", "'%'", "'_'", "'('", 
      "')'", "'['", "']'", "'<-'", "'->'", "'='", "'<>'", "'>'", "'>='", 
      "'<'", "'<='", "'^'", "'+'", "'-'", "'*'", "'/'", "'<<'", "'>>'", 
      "", "", "'~'"
    },
    std::vector<std::string>{
      "", "BlockComment", "LineComment", "AT", "CASE", "CONST", "CLEAR", 
      "DATA", "DATALABEL", "DEF", "DIM", "ELSE", "END", "FOR", "FROM", "HAS", 
      "IF", "IMPORT", "INPUT", "INTO", "LET", "NEXT", "OF", "OPTION", "OTHERWISE", 
      "PRINT", "QUIT", "READ", "RECORD", "REF", "REM", "REPEAT", "RESTORE", 
      "RETURN", "THEN", "SIZE", "STEP", "SYS", "SWAP", "TO", "UNTIL", "WHEN", 
      "WITH", "WHILE", "MAIN", "ABS", "ACS", "ASN", "ATN", "COS", "DEG", 
      "EXP", "FLOOR", "LN", "LOG", "MIN", "MAX", "PI", "RAD", "ROUND", "SGN", 
      "SIN", "SQR", "TAN", "VECTOR", "LIST", "MAP", "STACK", "QUEUE", "SET", 
      "FALSE", "TRUE", "ASC", "CHR", "INSTR", "LEFT", "MID", "RIGHT", "LEN", 
      "BYTE", "INT", "FLOAT", "STRING", "DOLLAR", "HASH", "COLON", "SEMICOLON", 
      "DOT", "COMMA", "QUOTE", "NEWLINE", "PERCENT", "UNDERSCORE", "LPAREN", 
      "RPAREN", "SOPEN", "SCLOSE", "ASSIGNL", "ASSIGNR", "EQ", "NE", "GT", 
      "GE", "LT", "LE", "HAT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "SHL", 
      "SHR", "MOD", "DIV", "COMP", "NOT", "AND", "OR", "EOR", "STRINGLITERAL", 
      "HEXNUMBER", "BINARYNUMBER", "FLOATLITERAL", "INTEGERLITERAL", "IDENTIFIER", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,125,893,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,1,0,1,0,1,0,1,1,4,1,119,8,1,11,1,12,1,120,1,1,5,1,124,8,1,10,1,12,
  	1,127,9,1,1,1,1,1,1,1,3,1,132,8,1,5,1,134,8,1,10,1,12,1,137,9,1,3,1,139,
  	8,1,1,2,5,2,142,8,2,10,2,12,2,145,9,2,1,2,1,2,3,2,149,8,2,4,2,151,8,2,
  	11,2,12,2,152,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,181,8,3,1,4,4,4,184,
  	8,4,11,4,12,4,185,1,5,3,5,189,8,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,197,8,6,
  	1,6,3,6,200,8,6,1,6,1,6,5,6,204,8,6,10,6,12,6,207,9,6,1,6,3,6,210,8,6,
  	1,7,1,7,1,7,1,7,3,7,216,8,7,1,7,5,7,219,8,7,10,7,12,7,222,9,7,1,7,1,7,
  	3,7,226,8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,240,8,
  	9,10,9,12,9,243,9,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,3,12,
  	254,8,12,1,12,1,12,5,12,258,8,12,10,12,12,12,261,9,12,1,12,1,12,1,13,
  	1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,275,8,14,1,14,1,14,
  	1,14,1,15,1,15,1,15,1,16,1,16,1,16,3,16,286,8,16,1,16,1,16,1,16,3,16,
  	291,8,16,1,17,1,17,1,17,3,17,296,8,17,1,17,1,17,1,17,1,17,1,17,3,17,303,
  	8,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,316,
  	8,19,1,20,3,20,319,8,20,1,20,1,20,1,20,1,20,3,20,325,8,20,3,20,327,8,
  	20,1,21,1,21,3,21,331,8,21,1,21,1,21,3,21,335,8,21,1,21,3,21,338,8,21,
  	1,21,3,21,341,8,21,3,21,343,8,21,1,22,1,22,1,22,1,22,3,22,349,8,22,1,
  	22,3,22,352,8,22,1,22,5,22,355,8,22,10,22,12,22,358,9,22,1,22,3,22,361,
  	8,22,1,22,1,22,5,22,365,8,22,10,22,12,22,368,9,22,1,22,5,22,371,8,22,
  	10,22,12,22,374,9,22,1,22,3,22,377,8,22,1,22,5,22,380,8,22,10,22,12,22,
  	383,9,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,25,1,25,1,25,1,26,1,26,3,26,402,8,26,1,27,1,27,1,27,5,27,407,8,27,10,
  	27,12,27,410,9,27,1,27,1,27,1,27,1,27,4,27,416,8,27,11,27,12,27,417,1,
  	27,1,27,1,27,5,27,423,8,27,10,27,12,27,426,9,27,1,27,5,27,429,8,27,10,
  	27,12,27,432,9,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
  	29,1,29,5,29,446,8,29,10,29,12,29,449,9,29,1,29,1,29,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,3,33,468,8,
  	33,1,33,1,33,1,33,1,34,1,34,1,34,3,34,476,8,34,1,34,1,34,5,34,480,8,34,
  	10,34,12,34,483,9,34,1,34,3,34,486,8,34,1,34,1,34,5,34,490,8,34,10,34,
  	12,34,493,9,34,1,35,1,35,1,35,3,35,498,8,35,1,36,1,36,1,36,3,36,503,8,
  	36,1,36,1,36,3,36,507,8,36,1,36,1,36,5,36,511,8,36,10,36,12,36,514,9,
  	36,1,36,1,36,1,37,1,37,1,37,4,37,521,8,37,11,37,12,37,522,1,38,1,38,1,
  	38,3,38,528,8,38,1,38,1,38,5,38,532,8,38,10,38,12,38,535,9,38,1,38,1,
  	38,1,38,4,38,540,8,38,11,38,12,38,541,1,39,1,39,1,39,1,39,1,39,3,39,549,
  	8,39,1,39,1,39,5,39,553,8,39,10,39,12,39,556,9,39,1,39,1,39,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,3,40,567,8,40,1,40,1,40,1,40,1,40,5,40,573,8,
  	40,10,40,12,40,576,9,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,585,8,
  	41,1,41,1,41,5,41,589,8,41,10,41,12,41,592,9,41,1,41,1,41,1,42,1,42,1,
  	42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
  	48,1,48,1,48,1,48,3,48,644,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,3,49,655,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
  	50,3,50,681,8,50,1,50,1,50,1,50,3,50,686,8,50,1,50,3,50,689,8,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,732,
  	8,50,1,50,1,50,1,50,1,50,3,50,738,8,50,1,50,1,50,3,50,742,8,50,1,50,1,
  	50,1,50,1,50,3,50,748,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,756,8,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,3,50,764,8,50,1,50,1,50,3,50,768,8,50,1,
  	50,1,50,1,50,1,50,3,50,774,8,50,1,50,1,50,3,50,778,8,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,3,50,786,8,50,1,50,1,50,3,50,790,8,50,1,50,1,50,1,50,1,
  	50,3,50,796,8,50,1,50,1,50,1,50,1,50,3,50,802,8,50,1,50,1,50,3,50,806,
  	8,50,3,50,808,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	1,50,1,50,5,50,864,8,50,10,50,12,50,867,9,50,1,51,1,51,1,52,1,52,1,53,
  	1,53,1,53,3,53,876,8,53,1,54,3,54,879,8,54,1,54,1,54,1,55,1,55,1,55,3,
  	55,886,8,55,1,55,3,55,889,8,55,1,56,1,56,1,56,0,1,100,57,0,2,4,6,8,10,
  	12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
  	58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
  	104,106,108,110,112,0,5,1,1,85,85,2,0,85,85,90,90,1,0,79,82,2,0,79,82,
  	124,124,1,0,106,107,1022,0,114,1,0,0,0,2,138,1,0,0,0,4,150,1,0,0,0,6,
  	180,1,0,0,0,8,183,1,0,0,0,10,188,1,0,0,0,12,194,1,0,0,0,14,211,1,0,0,
  	0,16,230,1,0,0,0,18,235,1,0,0,0,20,244,1,0,0,0,22,247,1,0,0,0,24,250,
  	1,0,0,0,26,264,1,0,0,0,28,266,1,0,0,0,30,279,1,0,0,0,32,282,1,0,0,0,34,
  	292,1,0,0,0,36,308,1,0,0,0,38,311,1,0,0,0,40,318,1,0,0,0,42,328,1,0,0,
  	0,44,344,1,0,0,0,46,388,1,0,0,0,48,393,1,0,0,0,50,396,1,0,0,0,52,399,
  	1,0,0,0,54,403,1,0,0,0,56,436,1,0,0,0,58,441,1,0,0,0,60,452,1,0,0,0,62,
  	458,1,0,0,0,64,461,1,0,0,0,66,467,1,0,0,0,68,472,1,0,0,0,70,494,1,0,0,
  	0,72,499,1,0,0,0,74,517,1,0,0,0,76,524,1,0,0,0,78,543,1,0,0,0,80,559,
  	1,0,0,0,82,579,1,0,0,0,84,595,1,0,0,0,86,602,1,0,0,0,88,609,1,0,0,0,90,
  	616,1,0,0,0,92,625,1,0,0,0,94,632,1,0,0,0,96,643,1,0,0,0,98,654,1,0,0,
  	0,100,807,1,0,0,0,102,868,1,0,0,0,104,870,1,0,0,0,106,875,1,0,0,0,108,
  	878,1,0,0,0,110,888,1,0,0,0,112,890,1,0,0,0,114,115,3,2,1,0,115,116,5,
  	0,0,1,116,1,1,0,0,0,117,119,3,8,4,0,118,117,1,0,0,0,119,120,1,0,0,0,120,
  	118,1,0,0,0,120,121,1,0,0,0,121,139,1,0,0,0,122,124,3,8,4,0,123,122,1,
  	0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,
  	127,125,1,0,0,0,128,131,3,6,3,0,129,132,3,8,4,0,130,132,5,0,0,1,131,129,
  	1,0,0,0,131,130,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,125,1,0,0,
  	0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,139,1,0,0,0,137,
  	135,1,0,0,0,138,118,1,0,0,0,138,135,1,0,0,0,139,3,1,0,0,0,140,142,5,85,
  	0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
  	146,1,0,0,0,145,143,1,0,0,0,146,148,3,6,3,0,147,149,7,0,0,0,148,147,1,
  	0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,143,1,0,0,0,151,152,1,0,0,0,
  	152,150,1,0,0,0,152,153,1,0,0,0,153,5,1,0,0,0,154,181,3,10,5,0,155,181,
  	3,12,6,0,156,181,3,14,7,0,157,181,3,62,31,0,158,181,3,16,8,0,159,181,
  	3,18,9,0,160,181,3,20,10,0,161,181,3,22,11,0,162,181,3,26,13,0,163,181,
  	3,28,14,0,164,181,3,64,32,0,165,181,3,32,16,0,166,181,3,34,17,0,167,181,
  	3,36,18,0,168,181,3,30,15,0,169,181,3,38,19,0,170,181,3,44,22,0,171,181,
  	3,42,21,0,172,181,3,48,24,0,173,181,3,46,23,0,174,181,3,50,25,0,175,181,
  	3,52,26,0,176,181,3,66,33,0,177,181,3,54,27,0,178,181,3,56,28,0,179,181,
  	3,60,30,0,180,154,1,0,0,0,180,155,1,0,0,0,180,156,1,0,0,0,180,157,1,0,
  	0,0,180,158,1,0,0,0,180,159,1,0,0,0,180,160,1,0,0,0,180,161,1,0,0,0,180,
  	162,1,0,0,0,180,163,1,0,0,0,180,164,1,0,0,0,180,165,1,0,0,0,180,166,1,
  	0,0,0,180,167,1,0,0,0,180,168,1,0,0,0,180,169,1,0,0,0,180,170,1,0,0,0,
  	180,171,1,0,0,0,180,172,1,0,0,0,180,173,1,0,0,0,180,174,1,0,0,0,180,175,
  	1,0,0,0,180,176,1,0,0,0,180,177,1,0,0,0,180,178,1,0,0,0,180,179,1,0,0,
  	0,181,7,1,0,0,0,182,184,7,1,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,
  	1,0,0,0,185,186,1,0,0,0,186,9,1,0,0,0,187,189,5,20,0,0,188,187,1,0,0,
  	0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,3,96,48,0,191,192,5,99,0,0,
  	192,193,3,100,50,0,193,11,1,0,0,0,194,196,5,124,0,0,195,197,5,93,0,0,
  	196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,3,100,50,0,199,
  	198,1,0,0,0,199,200,1,0,0,0,200,205,1,0,0,0,201,202,5,88,0,0,202,204,
  	3,100,50,0,203,201,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,
  	0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,208,210,5,94,0,0,209,208,1,0,0,
  	0,209,210,1,0,0,0,210,13,1,0,0,0,211,212,5,4,0,0,212,213,3,100,50,0,213,
  	215,5,22,0,0,214,216,3,8,4,0,215,214,1,0,0,0,215,216,1,0,0,0,216,220,
  	1,0,0,0,217,219,3,58,29,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,
  	0,0,220,221,1,0,0,0,221,225,1,0,0,0,222,220,1,0,0,0,223,224,5,24,0,0,
  	224,226,3,2,1,0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,228,
  	5,12,0,0,228,229,5,4,0,0,229,15,1,0,0,0,230,231,5,5,0,0,231,232,3,96,
  	48,0,232,233,5,99,0,0,233,234,3,106,53,0,234,17,1,0,0,0,235,236,5,7,0,
  	0,236,241,3,110,55,0,237,238,5,88,0,0,238,240,3,110,55,0,239,237,1,0,
  	0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,19,1,0,0,0,243,
  	241,1,0,0,0,244,245,5,8,0,0,245,246,3,112,56,0,246,21,1,0,0,0,247,248,
  	5,10,0,0,248,249,3,98,49,0,249,23,1,0,0,0,250,251,5,124,0,0,251,253,5,
  	93,0,0,252,254,3,100,50,0,253,252,1,0,0,0,253,254,1,0,0,0,254,259,1,0,
  	0,0,255,256,5,88,0,0,256,258,3,100,50,0,257,255,1,0,0,0,258,261,1,0,0,
  	0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,259,1,0,0,0,262,
  	263,5,94,0,0,263,25,1,0,0,0,264,265,5,26,0,0,265,27,1,0,0,0,266,267,5,
  	13,0,0,267,268,3,96,48,0,268,269,5,99,0,0,269,270,3,100,50,0,270,271,
  	5,39,0,0,271,274,3,100,50,0,272,273,5,36,0,0,273,275,3,100,50,0,274,272,
  	1,0,0,0,274,275,1,0,0,0,275,276,1,0,0,0,276,277,3,2,1,0,277,278,5,21,
  	0,0,278,29,1,0,0,0,279,280,5,17,0,0,280,281,3,112,56,0,281,31,1,0,0,0,
  	282,283,5,16,0,0,283,285,3,100,50,0,284,286,5,34,0,0,285,284,1,0,0,0,
  	285,286,1,0,0,0,286,287,1,0,0,0,287,290,3,4,2,0,288,289,5,11,0,0,289,
  	291,3,4,2,0,290,288,1,0,0,0,290,291,1,0,0,0,291,33,1,0,0,0,292,293,5,
  	16,0,0,293,295,3,100,50,0,294,296,5,34,0,0,295,294,1,0,0,0,295,296,1,
  	0,0,0,296,297,1,0,0,0,297,298,5,90,0,0,298,302,3,2,1,0,299,300,5,11,0,
  	0,300,301,5,90,0,0,301,303,3,2,1,0,302,299,1,0,0,0,302,303,1,0,0,0,303,
  	304,1,0,0,0,304,305,5,90,0,0,305,306,5,12,0,0,306,307,5,16,0,0,307,35,
  	1,0,0,0,308,309,5,18,0,0,309,310,3,96,48,0,310,37,1,0,0,0,311,312,5,23,
  	0,0,312,315,5,124,0,0,313,316,5,124,0,0,314,316,3,110,55,0,315,313,1,
  	0,0,0,315,314,1,0,0,0,316,39,1,0,0,0,317,319,5,29,0,0,318,317,1,0,0,0,
  	318,319,1,0,0,0,319,320,1,0,0,0,320,326,5,124,0,0,321,324,5,85,0,0,322,
  	325,3,102,51,0,323,325,5,124,0,0,324,322,1,0,0,0,324,323,1,0,0,0,325,
  	327,1,0,0,0,326,321,1,0,0,0,326,327,1,0,0,0,327,41,1,0,0,0,328,330,5,
  	25,0,0,329,331,5,37,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,342,1,0,0,
  	0,332,337,3,100,50,0,333,335,5,42,0,0,334,333,1,0,0,0,334,335,1,0,0,0,
  	335,336,1,0,0,0,336,338,3,100,50,0,337,334,1,0,0,0,337,338,1,0,0,0,338,
  	340,1,0,0,0,339,341,5,86,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,343,
  	1,0,0,0,342,332,1,0,0,0,342,343,1,0,0,0,343,43,1,0,0,0,344,345,5,9,0,
  	0,345,348,5,124,0,0,346,347,5,85,0,0,347,349,3,102,51,0,348,346,1,0,0,
  	0,348,349,1,0,0,0,349,351,1,0,0,0,350,352,5,93,0,0,351,350,1,0,0,0,351,
  	352,1,0,0,0,352,356,1,0,0,0,353,355,5,90,0,0,354,353,1,0,0,0,355,358,
  	1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,
  	0,359,361,3,40,20,0,360,359,1,0,0,0,360,361,1,0,0,0,361,372,1,0,0,0,362,
  	366,5,88,0,0,363,365,5,90,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,
  	1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,0,368,366,1,0,0,0,369,371,3,40,
  	20,0,370,362,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,
  	373,376,1,0,0,0,374,372,1,0,0,0,375,377,5,94,0,0,376,375,1,0,0,0,376,
  	377,1,0,0,0,377,381,1,0,0,0,378,380,3,8,4,0,379,378,1,0,0,0,380,383,1,
  	0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,
  	384,385,3,2,1,0,385,386,5,12,0,0,386,387,5,9,0,0,387,45,1,0,0,0,388,389,
  	5,31,0,0,389,390,3,2,1,0,390,391,5,40,0,0,391,392,3,100,50,0,392,47,1,
  	0,0,0,393,394,5,27,0,0,394,395,3,96,48,0,395,49,1,0,0,0,396,397,5,32,
  	0,0,397,398,3,112,56,0,398,51,1,0,0,0,399,401,5,33,0,0,400,402,3,100,
  	50,0,401,400,1,0,0,0,401,402,1,0,0,0,402,53,1,0,0,0,403,404,5,28,0,0,
  	404,408,5,124,0,0,405,407,5,90,0,0,406,405,1,0,0,0,407,410,1,0,0,0,408,
  	406,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,408,1,0,0,0,411,412,5,
  	124,0,0,412,413,5,85,0,0,413,424,3,104,52,0,414,416,5,90,0,0,415,414,
  	1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,
  	0,419,420,5,124,0,0,420,421,5,85,0,0,421,423,3,104,52,0,422,415,1,0,0,
  	0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,430,1,0,0,0,426,
  	424,1,0,0,0,427,429,5,90,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,
  	1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,434,5,12,
  	0,0,434,435,5,28,0,0,435,55,1,0,0,0,436,437,5,38,0,0,437,438,3,68,34,
  	0,438,439,5,88,0,0,439,440,3,68,34,0,440,57,1,0,0,0,441,442,5,41,0,0,
  	442,447,3,100,50,0,443,444,5,88,0,0,444,446,3,100,50,0,445,443,1,0,0,
  	0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,450,1,0,0,0,449,
  	447,1,0,0,0,450,451,3,2,1,0,451,59,1,0,0,0,452,453,5,43,0,0,453,454,3,
  	100,50,0,454,455,3,2,1,0,455,456,5,12,0,0,456,457,5,43,0,0,457,61,1,0,
  	0,0,458,459,5,6,0,0,459,460,3,68,34,0,460,63,1,0,0,0,461,462,3,68,34,
  	0,462,463,5,97,0,0,463,464,3,68,34,0,464,65,1,0,0,0,465,468,3,68,34,0,
  	466,468,3,100,50,0,467,465,1,0,0,0,467,466,1,0,0,0,468,469,1,0,0,0,469,
  	470,5,98,0,0,470,471,3,68,34,0,471,67,1,0,0,0,472,485,5,124,0,0,473,475,
  	5,95,0,0,474,476,3,100,50,0,475,474,1,0,0,0,475,476,1,0,0,0,476,481,1,
  	0,0,0,477,478,5,88,0,0,478,480,3,100,50,0,479,477,1,0,0,0,480,483,1,0,
  	0,0,481,479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,
  	486,5,96,0,0,485,473,1,0,0,0,485,486,1,0,0,0,486,491,1,0,0,0,487,488,
  	5,87,0,0,488,490,5,124,0,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,
  	0,0,0,491,492,1,0,0,0,492,69,1,0,0,0,493,491,1,0,0,0,494,497,5,124,0,
  	0,495,496,5,85,0,0,496,498,3,102,51,0,497,495,1,0,0,0,497,498,1,0,0,0,
  	498,71,1,0,0,0,499,502,5,124,0,0,500,501,5,85,0,0,501,503,3,102,51,0,
  	502,500,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,506,5,95,0,0,505,
  	507,3,100,50,0,506,505,1,0,0,0,506,507,1,0,0,0,507,512,1,0,0,0,508,509,
  	5,88,0,0,509,511,3,100,50,0,510,508,1,0,0,0,511,514,1,0,0,0,512,510,1,
  	0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,516,5,96,0,
  	0,516,73,1,0,0,0,517,520,5,124,0,0,518,519,5,87,0,0,519,521,5,124,0,0,
  	520,518,1,0,0,0,521,522,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,75,
  	1,0,0,0,524,525,5,124,0,0,525,527,5,95,0,0,526,528,3,100,50,0,527,526,
  	1,0,0,0,527,528,1,0,0,0,528,533,1,0,0,0,529,530,5,88,0,0,530,532,3,100,
  	50,0,531,529,1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,
  	534,536,1,0,0,0,535,533,1,0,0,0,536,539,5,96,0,0,537,538,5,87,0,0,538,
  	540,5,124,0,0,539,537,1,0,0,0,540,541,1,0,0,0,541,539,1,0,0,0,541,542,
  	1,0,0,0,542,77,1,0,0,0,543,544,5,124,0,0,544,545,5,85,0,0,545,546,3,102,
  	51,0,546,548,5,95,0,0,547,549,3,100,50,0,548,547,1,0,0,0,548,549,1,0,
  	0,0,549,554,1,0,0,0,550,551,5,88,0,0,551,553,3,100,50,0,552,550,1,0,0,
  	0,553,556,1,0,0,0,554,552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,
  	554,1,0,0,0,557,558,5,96,0,0,558,79,1,0,0,0,559,560,5,124,0,0,560,561,
  	5,85,0,0,561,562,5,124,0,0,562,566,5,93,0,0,563,564,5,124,0,0,564,565,
  	5,99,0,0,565,567,3,100,50,0,566,563,1,0,0,0,566,567,1,0,0,0,567,574,1,
  	0,0,0,568,569,5,88,0,0,569,570,5,124,0,0,570,571,5,99,0,0,571,573,3,100,
  	50,0,572,568,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,
  	575,577,1,0,0,0,576,574,1,0,0,0,577,578,5,94,0,0,578,81,1,0,0,0,579,580,
  	5,124,0,0,580,581,5,85,0,0,581,582,5,124,0,0,582,584,5,95,0,0,583,585,
  	3,100,50,0,584,583,1,0,0,0,584,585,1,0,0,0,585,590,1,0,0,0,586,587,5,
  	88,0,0,587,589,3,100,50,0,588,586,1,0,0,0,589,592,1,0,0,0,590,588,1,0,
  	0,0,590,591,1,0,0,0,591,593,1,0,0,0,592,590,1,0,0,0,593,594,5,96,0,0,
  	594,83,1,0,0,0,595,596,5,124,0,0,596,597,5,85,0,0,597,598,5,65,0,0,598,
  	599,5,95,0,0,599,600,3,104,52,0,600,601,5,96,0,0,601,85,1,0,0,0,602,603,
  	5,124,0,0,603,604,5,85,0,0,604,605,5,64,0,0,605,606,5,95,0,0,606,607,
  	3,104,52,0,607,608,5,96,0,0,608,87,1,0,0,0,609,610,5,124,0,0,610,611,
  	5,85,0,0,611,612,5,69,0,0,612,613,5,95,0,0,613,614,3,102,51,0,614,615,
  	5,96,0,0,615,89,1,0,0,0,616,617,5,124,0,0,617,618,5,85,0,0,618,619,5,
  	66,0,0,619,620,5,95,0,0,620,621,3,102,51,0,621,622,5,88,0,0,622,623,3,
  	104,52,0,623,624,5,96,0,0,624,91,1,0,0,0,625,626,5,124,0,0,626,627,5,
  	85,0,0,627,628,5,67,0,0,628,629,5,95,0,0,629,630,3,104,52,0,630,631,5,
  	96,0,0,631,93,1,0,0,0,632,633,5,124,0,0,633,634,5,85,0,0,634,635,5,68,
  	0,0,635,636,5,95,0,0,636,637,3,104,52,0,637,638,5,96,0,0,638,95,1,0,0,
  	0,639,644,3,70,35,0,640,644,3,72,36,0,641,644,3,74,37,0,642,644,3,76,
  	38,0,643,639,1,0,0,0,643,640,1,0,0,0,643,641,1,0,0,0,643,642,1,0,0,0,
  	644,97,1,0,0,0,645,655,3,78,39,0,646,655,3,80,40,0,647,655,3,82,41,0,
  	648,655,3,84,42,0,649,655,3,86,43,0,650,655,3,88,44,0,651,655,3,90,45,
  	0,652,655,3,92,46,0,653,655,3,94,47,0,654,645,1,0,0,0,654,646,1,0,0,0,
  	654,647,1,0,0,0,654,648,1,0,0,0,654,649,1,0,0,0,654,650,1,0,0,0,654,651,
  	1,0,0,0,654,652,1,0,0,0,654,653,1,0,0,0,655,99,1,0,0,0,656,657,6,50,-1,
  	0,657,658,5,93,0,0,658,659,3,100,50,0,659,660,5,94,0,0,660,808,1,0,0,
  	0,661,808,5,44,0,0,662,808,3,106,53,0,663,808,3,24,12,0,664,808,3,96,
  	48,0,665,808,3,68,34,0,666,667,3,68,34,0,667,668,5,15,0,0,668,669,3,100,
  	50,55,669,808,1,0,0,0,670,671,5,107,0,0,671,808,3,100,50,54,672,673,5,
  	106,0,0,673,808,3,100,50,53,674,675,5,80,0,0,675,808,3,100,50,52,676,
  	677,5,81,0,0,677,808,3,100,50,51,678,680,5,82,0,0,679,681,5,93,0,0,680,
  	679,1,0,0,0,680,681,1,0,0,0,681,682,1,0,0,0,682,685,3,100,50,0,683,684,
  	5,42,0,0,684,686,3,100,50,0,685,683,1,0,0,0,685,686,1,0,0,0,686,688,1,
  	0,0,0,687,689,5,94,0,0,688,687,1,0,0,0,688,689,1,0,0,0,689,808,1,0,0,
  	0,690,691,5,45,0,0,691,808,3,100,50,49,692,693,5,114,0,0,693,808,3,100,
  	50,48,694,695,5,115,0,0,695,808,3,100,50,47,696,808,5,71,0,0,697,808,
  	5,70,0,0,698,808,5,57,0,0,699,700,5,50,0,0,700,808,3,100,50,43,701,702,
  	5,58,0,0,702,808,3,100,50,42,703,704,5,60,0,0,704,808,3,100,50,41,705,
  	706,5,46,0,0,706,808,3,100,50,40,707,708,5,47,0,0,708,808,3,100,50,39,
  	709,710,5,48,0,0,710,808,3,100,50,38,711,712,5,49,0,0,712,808,3,100,50,
  	37,713,714,5,51,0,0,714,808,3,100,50,36,715,716,5,52,0,0,716,808,3,100,
  	50,35,717,718,5,59,0,0,718,808,3,100,50,34,719,720,5,53,0,0,720,808,3,
  	100,50,33,721,722,5,54,0,0,722,808,3,100,50,32,723,724,5,61,0,0,724,808,
  	3,100,50,31,725,726,5,62,0,0,726,808,3,100,50,30,727,728,5,63,0,0,728,
  	808,3,100,50,29,729,731,5,55,0,0,730,732,5,93,0,0,731,730,1,0,0,0,731,
  	732,1,0,0,0,732,733,1,0,0,0,733,734,3,100,50,0,734,735,5,88,0,0,735,737,
  	3,100,50,0,736,738,5,94,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,808,1,
  	0,0,0,739,741,5,56,0,0,740,742,5,93,0,0,741,740,1,0,0,0,741,742,1,0,0,
  	0,742,743,1,0,0,0,743,744,3,100,50,0,744,745,5,88,0,0,745,747,3,100,50,
  	0,746,748,5,94,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,808,1,0,0,0,749,
  	750,5,72,0,0,750,808,3,100,50,26,751,752,5,73,0,0,752,808,3,100,50,25,
  	753,755,5,74,0,0,754,756,5,93,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,
  	757,1,0,0,0,757,758,3,100,50,0,758,759,5,88,0,0,759,760,3,100,50,0,760,
  	761,5,88,0,0,761,763,3,100,50,0,762,764,5,94,0,0,763,762,1,0,0,0,763,
  	764,1,0,0,0,764,808,1,0,0,0,765,767,5,75,0,0,766,768,5,93,0,0,767,766,
  	1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,770,3,100,50,0,770,771,5,
  	88,0,0,771,773,3,100,50,0,772,774,5,94,0,0,773,772,1,0,0,0,773,774,1,
  	0,0,0,774,808,1,0,0,0,775,777,5,76,0,0,776,778,5,93,0,0,777,776,1,0,0,
  	0,777,778,1,0,0,0,778,779,1,0,0,0,779,780,3,100,50,0,780,781,5,88,0,0,
  	781,782,3,100,50,0,782,783,5,88,0,0,783,785,3,100,50,0,784,786,5,94,0,
  	0,785,784,1,0,0,0,785,786,1,0,0,0,786,808,1,0,0,0,787,789,5,77,0,0,788,
  	790,5,93,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,792,
  	3,100,50,0,792,793,5,88,0,0,793,795,3,100,50,0,794,796,5,94,0,0,795,794,
  	1,0,0,0,795,796,1,0,0,0,796,808,1,0,0,0,797,798,5,78,0,0,798,808,3,100,
  	50,20,799,801,5,35,0,0,800,802,5,93,0,0,801,800,1,0,0,0,801,802,1,0,0,
  	0,802,803,1,0,0,0,803,805,3,68,34,0,804,806,5,94,0,0,805,804,1,0,0,0,
  	805,806,1,0,0,0,806,808,1,0,0,0,807,656,1,0,0,0,807,661,1,0,0,0,807,662,
  	1,0,0,0,807,663,1,0,0,0,807,664,1,0,0,0,807,665,1,0,0,0,807,666,1,0,0,
  	0,807,670,1,0,0,0,807,672,1,0,0,0,807,674,1,0,0,0,807,676,1,0,0,0,807,
  	678,1,0,0,0,807,690,1,0,0,0,807,692,1,0,0,0,807,694,1,0,0,0,807,696,1,
  	0,0,0,807,697,1,0,0,0,807,698,1,0,0,0,807,699,1,0,0,0,807,701,1,0,0,0,
  	807,703,1,0,0,0,807,705,1,0,0,0,807,707,1,0,0,0,807,709,1,0,0,0,807,711,
  	1,0,0,0,807,713,1,0,0,0,807,715,1,0,0,0,807,717,1,0,0,0,807,719,1,0,0,
  	0,807,721,1,0,0,0,807,723,1,0,0,0,807,725,1,0,0,0,807,727,1,0,0,0,807,
  	729,1,0,0,0,807,739,1,0,0,0,807,749,1,0,0,0,807,751,1,0,0,0,807,753,1,
  	0,0,0,807,765,1,0,0,0,807,775,1,0,0,0,807,787,1,0,0,0,807,797,1,0,0,0,
  	807,799,1,0,0,0,808,865,1,0,0,0,809,810,10,18,0,0,810,811,5,105,0,0,811,
  	864,3,100,50,18,812,813,10,17,0,0,813,814,5,109,0,0,814,864,3,100,50,
  	18,815,816,10,16,0,0,816,817,5,108,0,0,817,864,3,100,50,17,818,819,10,
  	15,0,0,819,820,5,113,0,0,820,864,3,100,50,16,821,822,10,14,0,0,822,823,
  	5,112,0,0,823,864,3,100,50,15,824,825,10,13,0,0,825,826,5,106,0,0,826,
  	864,3,100,50,14,827,828,10,12,0,0,828,829,5,107,0,0,829,864,3,100,50,
  	13,830,831,10,11,0,0,831,832,5,110,0,0,832,864,3,100,50,12,833,834,10,
  	10,0,0,834,835,5,111,0,0,835,864,3,100,50,11,836,837,10,9,0,0,837,838,
  	5,99,0,0,838,864,3,100,50,10,839,840,10,8,0,0,840,841,5,100,0,0,841,864,
  	3,100,50,9,842,843,10,7,0,0,843,844,5,101,0,0,844,864,3,100,50,8,845,
  	846,10,6,0,0,846,847,5,102,0,0,847,864,3,100,50,7,848,849,10,5,0,0,849,
  	850,5,103,0,0,850,864,3,100,50,6,851,852,10,4,0,0,852,853,5,104,0,0,853,
  	864,3,100,50,5,854,855,10,3,0,0,855,856,5,116,0,0,856,864,3,100,50,4,
  	857,858,10,2,0,0,858,859,5,117,0,0,859,864,3,100,50,3,860,861,10,1,0,
  	0,861,862,5,118,0,0,862,864,3,100,50,2,863,809,1,0,0,0,863,812,1,0,0,
  	0,863,815,1,0,0,0,863,818,1,0,0,0,863,821,1,0,0,0,863,824,1,0,0,0,863,
  	827,1,0,0,0,863,830,1,0,0,0,863,833,1,0,0,0,863,836,1,0,0,0,863,839,1,
  	0,0,0,863,842,1,0,0,0,863,845,1,0,0,0,863,848,1,0,0,0,863,851,1,0,0,0,
  	863,854,1,0,0,0,863,857,1,0,0,0,863,860,1,0,0,0,864,867,1,0,0,0,865,863,
  	1,0,0,0,865,866,1,0,0,0,866,101,1,0,0,0,867,865,1,0,0,0,868,869,7,2,0,
  	0,869,103,1,0,0,0,870,871,7,3,0,0,871,105,1,0,0,0,872,876,3,108,54,0,
  	873,876,3,110,55,0,874,876,3,112,56,0,875,872,1,0,0,0,875,873,1,0,0,0,
  	875,874,1,0,0,0,876,107,1,0,0,0,877,879,7,4,0,0,878,877,1,0,0,0,878,879,
  	1,0,0,0,879,880,1,0,0,0,880,881,5,122,0,0,881,109,1,0,0,0,882,889,5,120,
  	0,0,883,889,5,121,0,0,884,886,7,4,0,0,885,884,1,0,0,0,885,886,1,0,0,0,
  	886,887,1,0,0,0,887,889,5,123,0,0,888,882,1,0,0,0,888,883,1,0,0,0,888,
  	885,1,0,0,0,889,111,1,0,0,0,890,891,5,119,0,0,891,113,1,0,0,0,94,120,
  	125,131,135,138,143,148,152,180,185,188,196,199,205,209,215,220,225,241,
  	253,259,274,285,290,295,302,315,318,324,326,330,334,337,340,342,348,351,
  	356,360,366,372,376,381,401,408,417,424,430,447,467,475,481,485,491,497,
  	502,506,512,522,527,533,541,548,554,566,574,584,590,643,654,680,685,688,
  	731,737,741,747,755,763,767,773,777,785,789,795,801,805,807,863,865,875,
  	878,885,888
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  daricParserStaticData = staticData.release();
}

}

DaricParser::DaricParser(TokenStream *input) : DaricParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

DaricParser::DaricParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  DaricParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *daricParserStaticData->atn, daricParserStaticData->decisionToDFA, daricParserStaticData->sharedContextCache, options);
}

DaricParser::~DaricParser() {
  delete _interpreter;
}

const atn::ATN& DaricParser::getATN() const {
  return *daricParserStaticData->atn;
}

std::string DaricParser::getGrammarFileName() const {
  return "Daric.g4";
}

const std::vector<std::string>& DaricParser::getRuleNames() const {
  return daricParserStaticData->ruleNames;
}

const dfa::Vocabulary& DaricParser::getVocabulary() const {
  return daricParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView DaricParser::getSerializedATN() const {
  return daricParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

DaricParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::StatementsContext* DaricParser::ProgramContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::ProgramContext::EOF() {
  return getToken(DaricParser::EOF, 0);
}


size_t DaricParser::ProgramContext::getRuleIndex() const {
  return DaricParser::RuleProgram;
}


std::any DaricParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ProgramContext* DaricParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, DaricParser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(114);
    statements();
    setState(115);
    match(DaricParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

DaricParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<DaricParser::SeparatorContext *> DaricParser::StatementsContext::separator() {
  return getRuleContexts<DaricParser::SeparatorContext>();
}

DaricParser::SeparatorContext* DaricParser::StatementsContext::separator(size_t i) {
  return getRuleContext<DaricParser::SeparatorContext>(i);
}

std::vector<DaricParser::StatementContext *> DaricParser::StatementsContext::statement() {
  return getRuleContexts<DaricParser::StatementContext>();
}

DaricParser::StatementContext* DaricParser::StatementsContext::statement(size_t i) {
  return getRuleContext<DaricParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::StatementsContext::EOF() {
  return getTokens(DaricParser::EOF);
}

tree::TerminalNode* DaricParser::StatementsContext::EOF(size_t i) {
  return getToken(DaricParser::EOF, i);
}


size_t DaricParser::StatementsContext::getRuleIndex() const {
  return DaricParser::RuleStatements;
}


std::any DaricParser::StatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStatements(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StatementsContext* DaricParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 2, DaricParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(138);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(118); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(117);
                separator();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(120); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(135);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(125);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == DaricParser::COLON

          || _la == DaricParser::NEWLINE) {
            setState(122);
            separator();
            setState(127);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(128);
          statement();
          setState(131);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
          case 1: {
            setState(129);
            separator();
            break;
          }

          case 2: {
            setState(130);
            match(DaricParser::EOF);
            break;
          }

          default:
            break;
          } 
        }
        setState(137);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementslContext ------------------------------------------------------------------

DaricParser::StatementslContext::StatementslContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<DaricParser::StatementContext *> DaricParser::StatementslContext::statement() {
  return getRuleContexts<DaricParser::StatementContext>();
}

DaricParser::StatementContext* DaricParser::StatementslContext::statement(size_t i) {
  return getRuleContext<DaricParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::StatementslContext::COLON() {
  return getTokens(DaricParser::COLON);
}

tree::TerminalNode* DaricParser::StatementslContext::COLON(size_t i) {
  return getToken(DaricParser::COLON, i);
}

std::vector<tree::TerminalNode *> DaricParser::StatementslContext::EOF() {
  return getTokens(DaricParser::EOF);
}

tree::TerminalNode* DaricParser::StatementslContext::EOF(size_t i) {
  return getToken(DaricParser::EOF, i);
}


size_t DaricParser::StatementslContext::getRuleIndex() const {
  return DaricParser::RuleStatementsl;
}


std::any DaricParser::StatementslContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStatementsl(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StatementslContext* DaricParser::statementsl() {
  StatementslContext *_localctx = _tracker.createInstance<StatementslContext>(_ctx, getState());
  enterRule(_localctx, 4, DaricParser::RuleStatementsl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(150); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(143);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (_la == DaricParser::COLON) {
                setState(140);
                match(DaricParser::COLON);
                setState(145);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(146);
              statement();
              setState(148);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
              case 1: {
                setState(147);
                _la = _input->LA(1);
                if (!(_la == DaricParser::EOF || _la == DaricParser::COLON)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(152); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

DaricParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::AssignContext* DaricParser::StatementContext::assign() {
  return getRuleContext<DaricParser::AssignContext>(0);
}

DaricParser::CallContext* DaricParser::StatementContext::call() {
  return getRuleContext<DaricParser::CallContext>(0);
}

DaricParser::CaseContext* DaricParser::StatementContext::case_() {
  return getRuleContext<DaricParser::CaseContext>(0);
}

DaricParser::ClearContext* DaricParser::StatementContext::clear() {
  return getRuleContext<DaricParser::ClearContext>(0);
}

DaricParser::ConstContext* DaricParser::StatementContext::const_() {
  return getRuleContext<DaricParser::ConstContext>(0);
}

DaricParser::DataContext* DaricParser::StatementContext::data() {
  return getRuleContext<DaricParser::DataContext>(0);
}

DaricParser::DataLabelContext* DaricParser::StatementContext::dataLabel() {
  return getRuleContext<DaricParser::DataLabelContext>(0);
}

DaricParser::DimContext* DaricParser::StatementContext::dim() {
  return getRuleContext<DaricParser::DimContext>(0);
}

DaricParser::EndContext* DaricParser::StatementContext::end() {
  return getRuleContext<DaricParser::EndContext>(0);
}

DaricParser::ForContext* DaricParser::StatementContext::for_() {
  return getRuleContext<DaricParser::ForContext>(0);
}

DaricParser::GetContext* DaricParser::StatementContext::get() {
  return getRuleContext<DaricParser::GetContext>(0);
}

DaricParser::IfContext* DaricParser::StatementContext::if_() {
  return getRuleContext<DaricParser::IfContext>(0);
}

DaricParser::IfmlContext* DaricParser::StatementContext::ifml() {
  return getRuleContext<DaricParser::IfmlContext>(0);
}

DaricParser::InputContext* DaricParser::StatementContext::input() {
  return getRuleContext<DaricParser::InputContext>(0);
}

DaricParser::ImportlibContext* DaricParser::StatementContext::importlib() {
  return getRuleContext<DaricParser::ImportlibContext>(0);
}

DaricParser::OptionContext* DaricParser::StatementContext::option() {
  return getRuleContext<DaricParser::OptionContext>(0);
}

DaricParser::ProcedureContext* DaricParser::StatementContext::procedure() {
  return getRuleContext<DaricParser::ProcedureContext>(0);
}

DaricParser::PrintContext* DaricParser::StatementContext::print() {
  return getRuleContext<DaricParser::PrintContext>(0);
}

DaricParser::ReadContext* DaricParser::StatementContext::read() {
  return getRuleContext<DaricParser::ReadContext>(0);
}

DaricParser::RepeatContext* DaricParser::StatementContext::repeat() {
  return getRuleContext<DaricParser::RepeatContext>(0);
}

DaricParser::RestoreContext* DaricParser::StatementContext::restore() {
  return getRuleContext<DaricParser::RestoreContext>(0);
}

DaricParser::ReturnContext* DaricParser::StatementContext::return_() {
  return getRuleContext<DaricParser::ReturnContext>(0);
}

DaricParser::SetContext* DaricParser::StatementContext::set() {
  return getRuleContext<DaricParser::SetContext>(0);
}

DaricParser::StructContext* DaricParser::StatementContext::struct_() {
  return getRuleContext<DaricParser::StructContext>(0);
}

DaricParser::SwapContext* DaricParser::StatementContext::swap() {
  return getRuleContext<DaricParser::SwapContext>(0);
}

DaricParser::WhileContext* DaricParser::StatementContext::while_() {
  return getRuleContext<DaricParser::WhileContext>(0);
}


size_t DaricParser::StatementContext::getRuleIndex() const {
  return DaricParser::RuleStatement;
}


std::any DaricParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StatementContext* DaricParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 6, DaricParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(180);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(154);
      assign();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(155);
      call();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(156);
      case_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(157);
      clear();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(158);
      const_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(159);
      data();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(160);
      dataLabel();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(161);
      dim();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(162);
      end();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(163);
      for_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(164);
      get();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(165);
      if_();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(166);
      ifml();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(167);
      input();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(168);
      importlib();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(169);
      option();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(170);
      procedure();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(171);
      print();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(172);
      read();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(173);
      repeat();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(174);
      restore();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(175);
      return_();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(176);
      set();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(177);
      struct_();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(178);
      swap();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(179);
      while_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SeparatorContext ------------------------------------------------------------------

DaricParser::SeparatorContext::SeparatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::SeparatorContext::COLON() {
  return getTokens(DaricParser::COLON);
}

tree::TerminalNode* DaricParser::SeparatorContext::COLON(size_t i) {
  return getToken(DaricParser::COLON, i);
}

std::vector<tree::TerminalNode *> DaricParser::SeparatorContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::SeparatorContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}


size_t DaricParser::SeparatorContext::getRuleIndex() const {
  return DaricParser::RuleSeparator;
}


std::any DaricParser::SeparatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitSeparator(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::SeparatorContext* DaricParser::separator() {
  SeparatorContext *_localctx = _tracker.createInstance<SeparatorContext>(_ctx, getState());
  enterRule(_localctx, 8, DaricParser::RuleSeparator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(183); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(182);
              _la = _input->LA(1);
              if (!(_la == DaricParser::COLON

              || _la == DaricParser::NEWLINE)) {
              _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(185); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

DaricParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::TypeSignatureContext* DaricParser::AssignContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::AssignContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

DaricParser::ExpressionContext* DaricParser::AssignContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

tree::TerminalNode* DaricParser::AssignContext::LET() {
  return getToken(DaricParser::LET, 0);
}


size_t DaricParser::AssignContext::getRuleIndex() const {
  return DaricParser::RuleAssign;
}


std::any DaricParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::AssignContext* DaricParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 10, DaricParser::RuleAssign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(188);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::LET) {
      setState(187);
      match(DaricParser::LET);
    }
    setState(190);
    typeSignature();
    setState(191);
    match(DaricParser::EQ);
    setState(192);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallContext ------------------------------------------------------------------

DaricParser::CallContext::CallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::CallContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::CallContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::CallContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::CallContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::CallContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

tree::TerminalNode* DaricParser::CallContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

tree::TerminalNode* DaricParser::CallContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}


size_t DaricParser::CallContext::getRuleIndex() const {
  return DaricParser::RuleCall;
}


std::any DaricParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::CallContext* DaricParser::call() {
  CallContext *_localctx = _tracker.createInstance<CallContext>(_ctx, getState());
  enterRule(_localctx, 12, DaricParser::RuleCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(194);
    match(DaricParser::IDENTIFIER);
    setState(196);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(195);
      antlrcpp::downCast<CallContext *>(_localctx)->name = match(DaricParser::LPAREN);
      break;
    }

    default:
      break;
    }
    setState(199);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(198);
      expression(0);
      break;
    }

    default:
      break;
    }
    setState(205);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(201);
      match(DaricParser::COMMA);
      setState(202);
      expression(0);
      setState(207);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::RPAREN) {
      setState(208);
      antlrcpp::downCast<CallContext *>(_localctx)->name = match(DaricParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseContext ------------------------------------------------------------------

DaricParser::CaseContext::CaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::CaseContext::CASE() {
  return getTokens(DaricParser::CASE);
}

tree::TerminalNode* DaricParser::CaseContext::CASE(size_t i) {
  return getToken(DaricParser::CASE, i);
}

DaricParser::ExpressionContext* DaricParser::CaseContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

tree::TerminalNode* DaricParser::CaseContext::OF() {
  return getToken(DaricParser::OF, 0);
}

tree::TerminalNode* DaricParser::CaseContext::END() {
  return getToken(DaricParser::END, 0);
}

DaricParser::SeparatorContext* DaricParser::CaseContext::separator() {
  return getRuleContext<DaricParser::SeparatorContext>(0);
}

std::vector<DaricParser::WhenContext *> DaricParser::CaseContext::when() {
  return getRuleContexts<DaricParser::WhenContext>();
}

DaricParser::WhenContext* DaricParser::CaseContext::when(size_t i) {
  return getRuleContext<DaricParser::WhenContext>(i);
}

tree::TerminalNode* DaricParser::CaseContext::OTHERWISE() {
  return getToken(DaricParser::OTHERWISE, 0);
}

DaricParser::StatementsContext* DaricParser::CaseContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}


size_t DaricParser::CaseContext::getRuleIndex() const {
  return DaricParser::RuleCase;
}


std::any DaricParser::CaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitCase(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::CaseContext* DaricParser::case_() {
  CaseContext *_localctx = _tracker.createInstance<CaseContext>(_ctx, getState());
  enterRule(_localctx, 14, DaricParser::RuleCase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(211);
    match(DaricParser::CASE);
    setState(212);
    expression(0);
    setState(213);
    match(DaricParser::OF);
    setState(215);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::COLON

    || _la == DaricParser::NEWLINE) {
      setState(214);
      separator();
    }
    setState(220);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::WHEN) {
      setState(217);
      when();
      setState(222);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(225);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::OTHERWISE) {
      setState(223);
      match(DaricParser::OTHERWISE);
      setState(224);
      statements();
    }
    setState(227);
    match(DaricParser::END);
    setState(228);
    match(DaricParser::CASE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstContext ------------------------------------------------------------------

DaricParser::ConstContext::ConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ConstContext::CONST() {
  return getToken(DaricParser::CONST, 0);
}

DaricParser::TypeSignatureContext* DaricParser::ConstContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::ConstContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

DaricParser::LiteralContext* DaricParser::ConstContext::literal() {
  return getRuleContext<DaricParser::LiteralContext>(0);
}


size_t DaricParser::ConstContext::getRuleIndex() const {
  return DaricParser::RuleConst;
}


std::any DaricParser::ConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitConst(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ConstContext* DaricParser::const_() {
  ConstContext *_localctx = _tracker.createInstance<ConstContext>(_ctx, getState());
  enterRule(_localctx, 16, DaricParser::RuleConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(230);
    match(DaricParser::CONST);
    setState(231);
    typeSignature();
    setState(232);
    match(DaricParser::EQ);
    setState(233);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataContext ------------------------------------------------------------------

DaricParser::DataContext::DataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::DataContext::DATA() {
  return getToken(DaricParser::DATA, 0);
}

std::vector<DaricParser::IntegerLiteralContext *> DaricParser::DataContext::integerLiteral() {
  return getRuleContexts<DaricParser::IntegerLiteralContext>();
}

DaricParser::IntegerLiteralContext* DaricParser::DataContext::integerLiteral(size_t i) {
  return getRuleContext<DaricParser::IntegerLiteralContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::DataContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::DataContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::DataContext::getRuleIndex() const {
  return DaricParser::RuleData;
}


std::any DaricParser::DataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitData(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::DataContext* DaricParser::data() {
  DataContext *_localctx = _tracker.createInstance<DataContext>(_ctx, getState());
  enterRule(_localctx, 18, DaricParser::RuleData);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(235);
    match(DaricParser::DATA);
    setState(236);
    integerLiteral();
    setState(241);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(237);
      match(DaricParser::COMMA);
      setState(238);
      integerLiteral();
      setState(243);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataLabelContext ------------------------------------------------------------------

DaricParser::DataLabelContext::DataLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::DataLabelContext::DATALABEL() {
  return getToken(DaricParser::DATALABEL, 0);
}

DaricParser::StringLiteralContext* DaricParser::DataLabelContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::DataLabelContext::getRuleIndex() const {
  return DaricParser::RuleDataLabel;
}


std::any DaricParser::DataLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitDataLabel(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::DataLabelContext* DaricParser::dataLabel() {
  DataLabelContext *_localctx = _tracker.createInstance<DataLabelContext>(_ctx, getState());
  enterRule(_localctx, 20, DaricParser::RuleDataLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(244);
    match(DaricParser::DATALABEL);
    setState(245);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimContext ------------------------------------------------------------------

DaricParser::DimContext::DimContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::DimContext::DIM() {
  return getToken(DaricParser::DIM, 0);
}

DaricParser::TypeSignatureArrayOrCollectionContext* DaricParser::DimContext::typeSignatureArrayOrCollection() {
  return getRuleContext<DaricParser::TypeSignatureArrayOrCollectionContext>(0);
}


size_t DaricParser::DimContext::getRuleIndex() const {
  return DaricParser::RuleDim;
}


std::any DaricParser::DimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitDim(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::DimContext* DaricParser::dim() {
  DimContext *_localctx = _tracker.createInstance<DimContext>(_ctx, getState());
  enterRule(_localctx, 22, DaricParser::RuleDim);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(247);
    match(DaricParser::DIM);
    setState(248);
    typeSignatureArrayOrCollection();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprcallContext ------------------------------------------------------------------

DaricParser::ExprcallContext::ExprcallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ExprcallContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::ExprcallContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

tree::TerminalNode* DaricParser::ExprcallContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::ExprcallContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::ExprcallContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::ExprcallContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::ExprcallContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::ExprcallContext::getRuleIndex() const {
  return DaricParser::RuleExprcall;
}


std::any DaricParser::ExprcallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitExprcall(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ExprcallContext* DaricParser::exprcall() {
  ExprcallContext *_localctx = _tracker.createInstance<ExprcallContext>(_ctx, getState());
  enterRule(_localctx, 24, DaricParser::RuleExprcall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(250);
    match(DaricParser::IDENTIFIER);
    setState(251);
    match(DaricParser::LPAREN);
    setState(253);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(252);
      expression(0);
    }
    setState(259);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(255);
      match(DaricParser::COMMA);
      setState(256);
      expression(0);
      setState(261);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(262);
    match(DaricParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndContext ------------------------------------------------------------------

DaricParser::EndContext::EndContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::EndContext::QUIT() {
  return getToken(DaricParser::QUIT, 0);
}


size_t DaricParser::EndContext::getRuleIndex() const {
  return DaricParser::RuleEnd;
}


std::any DaricParser::EndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitEnd(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::EndContext* DaricParser::end() {
  EndContext *_localctx = _tracker.createInstance<EndContext>(_ctx, getState());
  enterRule(_localctx, 26, DaricParser::RuleEnd);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(264);
    match(DaricParser::QUIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForContext ------------------------------------------------------------------

DaricParser::ForContext::ForContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ForContext::FOR() {
  return getToken(DaricParser::FOR, 0);
}

DaricParser::TypeSignatureContext* DaricParser::ForContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::ForContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::ForContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::ForContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

tree::TerminalNode* DaricParser::ForContext::TO() {
  return getToken(DaricParser::TO, 0);
}

DaricParser::StatementsContext* DaricParser::ForContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::ForContext::NEXT() {
  return getToken(DaricParser::NEXT, 0);
}

tree::TerminalNode* DaricParser::ForContext::STEP() {
  return getToken(DaricParser::STEP, 0);
}


size_t DaricParser::ForContext::getRuleIndex() const {
  return DaricParser::RuleFor;
}


std::any DaricParser::ForContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitFor(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ForContext* DaricParser::for_() {
  ForContext *_localctx = _tracker.createInstance<ForContext>(_ctx, getState());
  enterRule(_localctx, 28, DaricParser::RuleFor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(266);
    match(DaricParser::FOR);
    setState(267);
    typeSignature();
    setState(268);
    match(DaricParser::EQ);
    setState(269);
    expression(0);
    setState(270);
    match(DaricParser::TO);
    setState(271);
    expression(0);
    setState(274);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::STEP) {
      setState(272);
      match(DaricParser::STEP);
      setState(273);
      expression(0);
    }
    setState(276);
    statements();
    setState(277);
    match(DaricParser::NEXT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportlibContext ------------------------------------------------------------------

DaricParser::ImportlibContext::ImportlibContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ImportlibContext::IMPORT() {
  return getToken(DaricParser::IMPORT, 0);
}

DaricParser::StringLiteralContext* DaricParser::ImportlibContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::ImportlibContext::getRuleIndex() const {
  return DaricParser::RuleImportlib;
}


std::any DaricParser::ImportlibContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitImportlib(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ImportlibContext* DaricParser::importlib() {
  ImportlibContext *_localctx = _tracker.createInstance<ImportlibContext>(_ctx, getState());
  enterRule(_localctx, 30, DaricParser::RuleImportlib);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(279);
    match(DaricParser::IMPORT);
    setState(280);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

DaricParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::IfContext::IF() {
  return getToken(DaricParser::IF, 0);
}

DaricParser::ExpressionContext* DaricParser::IfContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

std::vector<DaricParser::StatementslContext *> DaricParser::IfContext::statementsl() {
  return getRuleContexts<DaricParser::StatementslContext>();
}

DaricParser::StatementslContext* DaricParser::IfContext::statementsl(size_t i) {
  return getRuleContext<DaricParser::StatementslContext>(i);
}

tree::TerminalNode* DaricParser::IfContext::THEN() {
  return getToken(DaricParser::THEN, 0);
}

tree::TerminalNode* DaricParser::IfContext::ELSE() {
  return getToken(DaricParser::ELSE, 0);
}


size_t DaricParser::IfContext::getRuleIndex() const {
  return DaricParser::RuleIf;
}


std::any DaricParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::IfContext* DaricParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 32, DaricParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    match(DaricParser::IF);
    setState(283);
    expression(0);
    setState(285);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::THEN) {
      setState(284);
      match(DaricParser::THEN);
    }
    setState(287);
    statementsl();
    setState(290);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(288);
      match(DaricParser::ELSE);
      setState(289);
      statementsl();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfmlContext ------------------------------------------------------------------

DaricParser::IfmlContext::IfmlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::IfmlContext::IF() {
  return getTokens(DaricParser::IF);
}

tree::TerminalNode* DaricParser::IfmlContext::IF(size_t i) {
  return getToken(DaricParser::IF, i);
}

DaricParser::ExpressionContext* DaricParser::IfmlContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> DaricParser::IfmlContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::IfmlContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}

std::vector<DaricParser::StatementsContext *> DaricParser::IfmlContext::statements() {
  return getRuleContexts<DaricParser::StatementsContext>();
}

DaricParser::StatementsContext* DaricParser::IfmlContext::statements(size_t i) {
  return getRuleContext<DaricParser::StatementsContext>(i);
}

tree::TerminalNode* DaricParser::IfmlContext::END() {
  return getToken(DaricParser::END, 0);
}

tree::TerminalNode* DaricParser::IfmlContext::THEN() {
  return getToken(DaricParser::THEN, 0);
}

tree::TerminalNode* DaricParser::IfmlContext::ELSE() {
  return getToken(DaricParser::ELSE, 0);
}


size_t DaricParser::IfmlContext::getRuleIndex() const {
  return DaricParser::RuleIfml;
}


std::any DaricParser::IfmlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitIfml(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::IfmlContext* DaricParser::ifml() {
  IfmlContext *_localctx = _tracker.createInstance<IfmlContext>(_ctx, getState());
  enterRule(_localctx, 34, DaricParser::RuleIfml);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(292);
    match(DaricParser::IF);
    setState(293);
    expression(0);
    setState(295);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::THEN) {
      setState(294);
      match(DaricParser::THEN);
    }
    setState(297);
    match(DaricParser::NEWLINE);
    setState(298);
    statements();
    setState(302);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::ELSE) {
      setState(299);
      match(DaricParser::ELSE);
      setState(300);
      match(DaricParser::NEWLINE);
      setState(301);
      statements();
    }
    setState(304);
    match(DaricParser::NEWLINE);
    setState(305);
    match(DaricParser::END);
    setState(306);
    match(DaricParser::IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputContext ------------------------------------------------------------------

DaricParser::InputContext::InputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::InputContext::INPUT() {
  return getToken(DaricParser::INPUT, 0);
}

DaricParser::TypeSignatureContext* DaricParser::InputContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}


size_t DaricParser::InputContext::getRuleIndex() const {
  return DaricParser::RuleInput;
}


std::any DaricParser::InputContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitInput(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::InputContext* DaricParser::input() {
  InputContext *_localctx = _tracker.createInstance<InputContext>(_ctx, getState());
  enterRule(_localctx, 36, DaricParser::RuleInput);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(308);
    match(DaricParser::INPUT);
    setState(309);
    typeSignature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

DaricParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::OptionContext::OPTION() {
  return getToken(DaricParser::OPTION, 0);
}

std::vector<tree::TerminalNode *> DaricParser::OptionContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::OptionContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

DaricParser::IntegerLiteralContext* DaricParser::OptionContext::integerLiteral() {
  return getRuleContext<DaricParser::IntegerLiteralContext>(0);
}


size_t DaricParser::OptionContext::getRuleIndex() const {
  return DaricParser::RuleOption;
}


std::any DaricParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::OptionContext* DaricParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 38, DaricParser::RuleOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(311);
    match(DaricParser::OPTION);
    setState(312);
    match(DaricParser::IDENTIFIER);
    setState(315);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case DaricParser::IDENTIFIER: {
        setState(313);
        match(DaricParser::IDENTIFIER);
        break;
      }

      case DaricParser::PLUS:
      case DaricParser::MINUS:
      case DaricParser::HEXNUMBER:
      case DaricParser::BINARYNUMBER:
      case DaricParser::INTEGERLITERAL: {
        setState(314);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

DaricParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::ParameterContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::ParameterContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::ParameterContext::REF() {
  return getToken(DaricParser::REF, 0);
}

tree::TerminalNode* DaricParser::ParameterContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::ParameterContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}


size_t DaricParser::ParameterContext::getRuleIndex() const {
  return DaricParser::RuleParameter;
}


std::any DaricParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ParameterContext* DaricParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 40, DaricParser::RuleParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(318);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::REF) {
      setState(317);
      match(DaricParser::REF);
    }
    setState(320);
    match(DaricParser::IDENTIFIER);
    setState(326);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(321);
      match(DaricParser::COLON);
      setState(324);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case DaricParser::BYTE:
        case DaricParser::INT:
        case DaricParser::FLOAT:
        case DaricParser::STRING: {
          setState(322);
          type();
          break;
        }

        case DaricParser::IDENTIFIER: {
          setState(323);
          match(DaricParser::IDENTIFIER);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrintContext ------------------------------------------------------------------

DaricParser::PrintContext::PrintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::PrintContext::PRINT() {
  return getToken(DaricParser::PRINT, 0);
}

tree::TerminalNode* DaricParser::PrintContext::SYS() {
  return getToken(DaricParser::SYS, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::PrintContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::PrintContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

tree::TerminalNode* DaricParser::PrintContext::SEMICOLON() {
  return getToken(DaricParser::SEMICOLON, 0);
}

tree::TerminalNode* DaricParser::PrintContext::WITH() {
  return getToken(DaricParser::WITH, 0);
}


size_t DaricParser::PrintContext::getRuleIndex() const {
  return DaricParser::RulePrint;
}


std::any DaricParser::PrintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitPrint(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::PrintContext* DaricParser::print() {
  PrintContext *_localctx = _tracker.createInstance<PrintContext>(_ctx, getState());
  enterRule(_localctx, 42, DaricParser::RulePrint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(328);
    match(DaricParser::PRINT);
    setState(330);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::SYS) {
      setState(329);
      match(DaricParser::SYS);
    }
    setState(342);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(332);
      antlrcpp::downCast<PrintContext *>(_localctx)->value = expression(0);
      setState(337);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
      case 1: {
        setState(334);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == DaricParser::WITH) {
          setState(333);
          match(DaricParser::WITH);
        }
        setState(336);
        antlrcpp::downCast<PrintContext *>(_localctx)->format = expression(0);
        break;
      }

      default:
        break;
      }
      setState(340);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == DaricParser::SEMICOLON) {
        setState(339);
        match(DaricParser::SEMICOLON);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureContext ------------------------------------------------------------------

DaricParser::ProcedureContext::ProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::ProcedureContext::DEF() {
  return getTokens(DaricParser::DEF);
}

tree::TerminalNode* DaricParser::ProcedureContext::DEF(size_t i) {
  return getToken(DaricParser::DEF, i);
}

tree::TerminalNode* DaricParser::ProcedureContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

DaricParser::StatementsContext* DaricParser::ProcedureContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::ProcedureContext::END() {
  return getToken(DaricParser::END, 0);
}

tree::TerminalNode* DaricParser::ProcedureContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::ProcedureContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::ProcedureContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> DaricParser::ProcedureContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::ProcedureContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}

std::vector<DaricParser::ParameterContext *> DaricParser::ProcedureContext::parameter() {
  return getRuleContexts<DaricParser::ParameterContext>();
}

DaricParser::ParameterContext* DaricParser::ProcedureContext::parameter(size_t i) {
  return getRuleContext<DaricParser::ParameterContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::ProcedureContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::ProcedureContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

tree::TerminalNode* DaricParser::ProcedureContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

std::vector<DaricParser::SeparatorContext *> DaricParser::ProcedureContext::separator() {
  return getRuleContexts<DaricParser::SeparatorContext>();
}

DaricParser::SeparatorContext* DaricParser::ProcedureContext::separator(size_t i) {
  return getRuleContext<DaricParser::SeparatorContext>(i);
}


size_t DaricParser::ProcedureContext::getRuleIndex() const {
  return DaricParser::RuleProcedure;
}


std::any DaricParser::ProcedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitProcedure(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ProcedureContext* DaricParser::procedure() {
  ProcedureContext *_localctx = _tracker.createInstance<ProcedureContext>(_ctx, getState());
  enterRule(_localctx, 44, DaricParser::RuleProcedure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(344);
    match(DaricParser::DEF);
    setState(345);
    match(DaricParser::IDENTIFIER);
    setState(348);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(346);
      match(DaricParser::COLON);
      setState(347);
      type();
      break;
    }

    default:
      break;
    }
    setState(351);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(350);
      match(DaricParser::LPAREN);
      break;
    }

    default:
      break;
    }
    setState(356);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(353);
        match(DaricParser::NEWLINE); 
      }
      setState(358);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    }
    setState(360);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(359);
      parameter();
      break;
    }

    default:
      break;
    }
    setState(372);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(362);
      match(DaricParser::COMMA);
      setState(366);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == DaricParser::NEWLINE) {
        setState(363);
        match(DaricParser::NEWLINE);
        setState(368);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(369);
      parameter();
      setState(374);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(376);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::RPAREN) {
      setState(375);
      match(DaricParser::RPAREN);
    }
    setState(381);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(378);
        separator(); 
      }
      setState(383);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    }
    setState(384);
    statements();
    setState(385);
    match(DaricParser::END);
    setState(386);
    match(DaricParser::DEF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatContext ------------------------------------------------------------------

DaricParser::RepeatContext::RepeatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::RepeatContext::REPEAT() {
  return getToken(DaricParser::REPEAT, 0);
}

DaricParser::StatementsContext* DaricParser::RepeatContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::RepeatContext::UNTIL() {
  return getToken(DaricParser::UNTIL, 0);
}

DaricParser::ExpressionContext* DaricParser::RepeatContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}


size_t DaricParser::RepeatContext::getRuleIndex() const {
  return DaricParser::RuleRepeat;
}


std::any DaricParser::RepeatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitRepeat(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::RepeatContext* DaricParser::repeat() {
  RepeatContext *_localctx = _tracker.createInstance<RepeatContext>(_ctx, getState());
  enterRule(_localctx, 46, DaricParser::RuleRepeat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(388);
    match(DaricParser::REPEAT);
    setState(389);
    statements();
    setState(390);
    match(DaricParser::UNTIL);
    setState(391);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadContext ------------------------------------------------------------------

DaricParser::ReadContext::ReadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ReadContext::READ() {
  return getToken(DaricParser::READ, 0);
}

DaricParser::TypeSignatureContext* DaricParser::ReadContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}


size_t DaricParser::ReadContext::getRuleIndex() const {
  return DaricParser::RuleRead;
}


std::any DaricParser::ReadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitRead(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ReadContext* DaricParser::read() {
  ReadContext *_localctx = _tracker.createInstance<ReadContext>(_ctx, getState());
  enterRule(_localctx, 48, DaricParser::RuleRead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(393);
    match(DaricParser::READ);
    setState(394);
    typeSignature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestoreContext ------------------------------------------------------------------

DaricParser::RestoreContext::RestoreContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::RestoreContext::RESTORE() {
  return getToken(DaricParser::RESTORE, 0);
}

DaricParser::StringLiteralContext* DaricParser::RestoreContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::RestoreContext::getRuleIndex() const {
  return DaricParser::RuleRestore;
}


std::any DaricParser::RestoreContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitRestore(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::RestoreContext* DaricParser::restore() {
  RestoreContext *_localctx = _tracker.createInstance<RestoreContext>(_ctx, getState());
  enterRule(_localctx, 50, DaricParser::RuleRestore);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(396);
    match(DaricParser::RESTORE);
    setState(397);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnContext ------------------------------------------------------------------

DaricParser::ReturnContext::ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ReturnContext::RETURN() {
  return getToken(DaricParser::RETURN, 0);
}

DaricParser::ExpressionContext* DaricParser::ReturnContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}


size_t DaricParser::ReturnContext::getRuleIndex() const {
  return DaricParser::RuleReturn;
}


std::any DaricParser::ReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitReturn(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ReturnContext* DaricParser::return_() {
  ReturnContext *_localctx = _tracker.createInstance<ReturnContext>(_ctx, getState());
  enterRule(_localctx, 52, DaricParser::RuleReturn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(399);
    match(DaricParser::RETURN);
    setState(401);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(400);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructContext ------------------------------------------------------------------

DaricParser::StructContext::StructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::RECORD() {
  return getTokens(DaricParser::RECORD);
}

tree::TerminalNode* DaricParser::StructContext::RECORD(size_t i) {
  return getToken(DaricParser::RECORD, i);
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::StructContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::COLON() {
  return getTokens(DaricParser::COLON);
}

tree::TerminalNode* DaricParser::StructContext::COLON(size_t i) {
  return getToken(DaricParser::COLON, i);
}

std::vector<DaricParser::TypeOrStructContext *> DaricParser::StructContext::typeOrStruct() {
  return getRuleContexts<DaricParser::TypeOrStructContext>();
}

DaricParser::TypeOrStructContext* DaricParser::StructContext::typeOrStruct(size_t i) {
  return getRuleContext<DaricParser::TypeOrStructContext>(i);
}

tree::TerminalNode* DaricParser::StructContext::END() {
  return getToken(DaricParser::END, 0);
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::StructContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}


size_t DaricParser::StructContext::getRuleIndex() const {
  return DaricParser::RuleStruct;
}


std::any DaricParser::StructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStruct(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StructContext* DaricParser::struct_() {
  StructContext *_localctx = _tracker.createInstance<StructContext>(_ctx, getState());
  enterRule(_localctx, 54, DaricParser::RuleStruct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(403);
    match(DaricParser::RECORD);
    setState(404);
    match(DaricParser::IDENTIFIER);
    setState(408);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::NEWLINE) {
      setState(405);
      match(DaricParser::NEWLINE);
      setState(410);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(411);
    match(DaricParser::IDENTIFIER);
    setState(412);
    match(DaricParser::COLON);
    setState(413);
    typeOrStruct();
    setState(424);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(415); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(414);
          match(DaricParser::NEWLINE);
          setState(417); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == DaricParser::NEWLINE);
        setState(419);
        match(DaricParser::IDENTIFIER);
        setState(420);
        match(DaricParser::COLON);
        setState(421);
        typeOrStruct(); 
      }
      setState(426);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
    setState(430);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::NEWLINE) {
      setState(427);
      match(DaricParser::NEWLINE);
      setState(432);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(433);
    match(DaricParser::END);
    setState(434);
    match(DaricParser::RECORD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwapContext ------------------------------------------------------------------

DaricParser::SwapContext::SwapContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::SwapContext::SWAP() {
  return getToken(DaricParser::SWAP, 0);
}

std::vector<DaricParser::VariableContext *> DaricParser::SwapContext::variable() {
  return getRuleContexts<DaricParser::VariableContext>();
}

DaricParser::VariableContext* DaricParser::SwapContext::variable(size_t i) {
  return getRuleContext<DaricParser::VariableContext>(i);
}

tree::TerminalNode* DaricParser::SwapContext::COMMA() {
  return getToken(DaricParser::COMMA, 0);
}


size_t DaricParser::SwapContext::getRuleIndex() const {
  return DaricParser::RuleSwap;
}


std::any DaricParser::SwapContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitSwap(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::SwapContext* DaricParser::swap() {
  SwapContext *_localctx = _tracker.createInstance<SwapContext>(_ctx, getState());
  enterRule(_localctx, 56, DaricParser::RuleSwap);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(436);
    match(DaricParser::SWAP);
    setState(437);
    variable();
    setState(438);
    match(DaricParser::COMMA);
    setState(439);
    variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenContext ------------------------------------------------------------------

DaricParser::WhenContext::WhenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::WhenContext::WHEN() {
  return getToken(DaricParser::WHEN, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::WhenContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::WhenContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

DaricParser::StatementsContext* DaricParser::WhenContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

std::vector<tree::TerminalNode *> DaricParser::WhenContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::WhenContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::WhenContext::getRuleIndex() const {
  return DaricParser::RuleWhen;
}


std::any DaricParser::WhenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitWhen(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::WhenContext* DaricParser::when() {
  WhenContext *_localctx = _tracker.createInstance<WhenContext>(_ctx, getState());
  enterRule(_localctx, 58, DaricParser::RuleWhen);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(441);
    match(DaricParser::WHEN);
    setState(442);
    expression(0);
    setState(447);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(443);
      match(DaricParser::COMMA);
      setState(444);
      expression(0);
      setState(449);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(450);
    statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

DaricParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::WhileContext::WHILE() {
  return getTokens(DaricParser::WHILE);
}

tree::TerminalNode* DaricParser::WhileContext::WHILE(size_t i) {
  return getToken(DaricParser::WHILE, i);
}

DaricParser::ExpressionContext* DaricParser::WhileContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

DaricParser::StatementsContext* DaricParser::WhileContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::WhileContext::END() {
  return getToken(DaricParser::END, 0);
}


size_t DaricParser::WhileContext::getRuleIndex() const {
  return DaricParser::RuleWhile;
}


std::any DaricParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::WhileContext* DaricParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 60, DaricParser::RuleWhile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(452);
    match(DaricParser::WHILE);
    setState(453);
    expression(0);
    setState(454);
    statements();
    setState(455);
    match(DaricParser::END);
    setState(456);
    match(DaricParser::WHILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClearContext ------------------------------------------------------------------

DaricParser::ClearContext::ClearContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ClearContext::CLEAR() {
  return getToken(DaricParser::CLEAR, 0);
}

DaricParser::VariableContext* DaricParser::ClearContext::variable() {
  return getRuleContext<DaricParser::VariableContext>(0);
}


size_t DaricParser::ClearContext::getRuleIndex() const {
  return DaricParser::RuleClear;
}


std::any DaricParser::ClearContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitClear(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ClearContext* DaricParser::clear() {
  ClearContext *_localctx = _tracker.createInstance<ClearContext>(_ctx, getState());
  enterRule(_localctx, 62, DaricParser::RuleClear);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(458);
    match(DaricParser::CLEAR);
    setState(459);
    variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetContext ------------------------------------------------------------------

DaricParser::GetContext::GetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::GetContext::ASSIGNL() {
  return getToken(DaricParser::ASSIGNL, 0);
}

std::vector<DaricParser::VariableContext *> DaricParser::GetContext::variable() {
  return getRuleContexts<DaricParser::VariableContext>();
}

DaricParser::VariableContext* DaricParser::GetContext::variable(size_t i) {
  return getRuleContext<DaricParser::VariableContext>(i);
}


size_t DaricParser::GetContext::getRuleIndex() const {
  return DaricParser::RuleGet;
}


std::any DaricParser::GetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitGet(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::GetContext* DaricParser::get() {
  GetContext *_localctx = _tracker.createInstance<GetContext>(_ctx, getState());
  enterRule(_localctx, 64, DaricParser::RuleGet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(461);
    antlrcpp::downCast<GetContext *>(_localctx)->in = variable();
    setState(462);
    match(DaricParser::ASSIGNL);
    setState(463);
    antlrcpp::downCast<GetContext *>(_localctx)->coll = variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetContext ------------------------------------------------------------------

DaricParser::SetContext::SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::SetContext::ASSIGNR() {
  return getToken(DaricParser::ASSIGNR, 0);
}

std::vector<DaricParser::VariableContext *> DaricParser::SetContext::variable() {
  return getRuleContexts<DaricParser::VariableContext>();
}

DaricParser::VariableContext* DaricParser::SetContext::variable(size_t i) {
  return getRuleContext<DaricParser::VariableContext>(i);
}

DaricParser::ExpressionContext* DaricParser::SetContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}


size_t DaricParser::SetContext::getRuleIndex() const {
  return DaricParser::RuleSet;
}


std::any DaricParser::SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitSet(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::SetContext* DaricParser::set() {
  SetContext *_localctx = _tracker.createInstance<SetContext>(_ctx, getState());
  enterRule(_localctx, 66, DaricParser::RuleSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(467);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(465);
      antlrcpp::downCast<SetContext *>(_localctx)->in = variable();
      break;
    }

    case 2: {
      setState(466);
      expression(0);
      break;
    }

    default:
      break;
    }
    setState(469);
    match(DaricParser::ASSIGNR);
    setState(470);
    antlrcpp::downCast<SetContext *>(_localctx)->coll = variable();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableContext ------------------------------------------------------------------

DaricParser::VariableContext::VariableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::VariableContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::VariableContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::VariableContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::VariableContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<tree::TerminalNode *> DaricParser::VariableContext::DOT() {
  return getTokens(DaricParser::DOT);
}

tree::TerminalNode* DaricParser::VariableContext::DOT(size_t i) {
  return getToken(DaricParser::DOT, i);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::VariableContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::VariableContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::VariableContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::VariableContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::VariableContext::getRuleIndex() const {
  return DaricParser::RuleVariable;
}


std::any DaricParser::VariableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitVariable(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::VariableContext* DaricParser::variable() {
  VariableContext *_localctx = _tracker.createInstance<VariableContext>(_ctx, getState());
  enterRule(_localctx, 68, DaricParser::RuleVariable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(472);
    match(DaricParser::IDENTIFIER);
    setState(485);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(473);
      match(DaricParser::SOPEN);
      setState(475);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
        setState(474);
        expression(0);
      }
      setState(481);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == DaricParser::COMMA) {
        setState(477);
        match(DaricParser::COMMA);
        setState(478);
        expression(0);
        setState(483);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(484);
      match(DaricParser::SCLOSE);
      break;
    }

    default:
      break;
    }
    setState(491);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(487);
        match(DaricParser::DOT);
        setState(488);
        match(DaricParser::IDENTIFIER); 
      }
      setState(493);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureSingleContext ------------------------------------------------------------------

DaricParser::TypeSignatureSingleContext::TypeSignatureSingleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureSingleContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSingleContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureSingleContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}


size_t DaricParser::TypeSignatureSingleContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureSingle;
}


std::any DaricParser::TypeSignatureSingleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureSingle(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureSingleContext* DaricParser::typeSignatureSingle() {
  TypeSignatureSingleContext *_localctx = _tracker.createInstance<TypeSignatureSingleContext>(_ctx, getState());
  enterRule(_localctx, 70, DaricParser::RuleTypeSignatureSingle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(494);
    match(DaricParser::IDENTIFIER);
    setState(497);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      setState(495);
      match(DaricParser::COLON);
      setState(496);
      type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureArrayContext ------------------------------------------------------------------

DaricParser::TypeSignatureArrayContext::TypeSignatureArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureArrayContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureArrayContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureArrayContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureArrayContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureArrayContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureArray;
}


std::any DaricParser::TypeSignatureArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureArray(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureArrayContext* DaricParser::typeSignatureArray() {
  TypeSignatureArrayContext *_localctx = _tracker.createInstance<TypeSignatureArrayContext>(_ctx, getState());
  enterRule(_localctx, 72, DaricParser::RuleTypeSignatureArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(499);
    match(DaricParser::IDENTIFIER);
    setState(502);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::COLON) {
      setState(500);
      match(DaricParser::COLON);
      setState(501);
      type();
    }
    setState(504);
    match(DaricParser::SOPEN);
    setState(506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(505);
      expression(0);
    }
    setState(512);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(508);
      match(DaricParser::COMMA);
      setState(509);
      expression(0);
      setState(514);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(515);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordContext::TypeSignatureRecordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordContext::DOT() {
  return getTokens(DaricParser::DOT);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordContext::DOT(size_t i) {
  return getToken(DaricParser::DOT, i);
}


size_t DaricParser::TypeSignatureRecordContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecord;
}


std::any DaricParser::TypeSignatureRecordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecord(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordContext* DaricParser::typeSignatureRecord() {
  TypeSignatureRecordContext *_localctx = _tracker.createInstance<TypeSignatureRecordContext>(_ctx, getState());
  enterRule(_localctx, 74, DaricParser::RuleTypeSignatureRecord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(517);
    match(DaricParser::IDENTIFIER);
    setState(520); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(518);
              match(DaricParser::DOT);
              setState(519);
              match(DaricParser::IDENTIFIER);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(522); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordArrayContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordArrayContext::TypeSignatureRecordArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureRecordArrayContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureRecordArrayContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayContext::DOT() {
  return getTokens(DaricParser::DOT);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::DOT(size_t i) {
  return getToken(DaricParser::DOT, i);
}


size_t DaricParser::TypeSignatureRecordArrayContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecordArray;
}


std::any DaricParser::TypeSignatureRecordArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecordArray(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordArrayContext* DaricParser::typeSignatureRecordArray() {
  TypeSignatureRecordArrayContext *_localctx = _tracker.createInstance<TypeSignatureRecordArrayContext>(_ctx, getState());
  enterRule(_localctx, 76, DaricParser::RuleTypeSignatureRecordArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(524);
    match(DaricParser::IDENTIFIER);
    setState(525);
    match(DaricParser::SOPEN);
    setState(527);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(526);
      expression(0);
    }
    setState(533);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(529);
      match(DaricParser::COMMA);
      setState(530);
      expression(0);
      setState(535);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(536);
    match(DaricParser::SCLOSE);
    setState(539); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(537);
              match(DaricParser::DOT);
              setState(538);
              match(DaricParser::IDENTIFIER);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(541); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureArrayNewContext ------------------------------------------------------------------

DaricParser::TypeSignatureArrayNewContext::TypeSignatureArrayNewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureArrayNewContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureArrayNewContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureArrayNewContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureArrayNewContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureArrayNewContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureArrayNew;
}


std::any DaricParser::TypeSignatureArrayNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureArrayNew(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureArrayNewContext* DaricParser::typeSignatureArrayNew() {
  TypeSignatureArrayNewContext *_localctx = _tracker.createInstance<TypeSignatureArrayNewContext>(_ctx, getState());
  enterRule(_localctx, 78, DaricParser::RuleTypeSignatureArrayNew);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(543);
    match(DaricParser::IDENTIFIER);
    setState(544);
    match(DaricParser::COLON);
    setState(545);
    type();
    setState(546);
    match(DaricParser::SOPEN);
    setState(548);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(547);
      expression(0);
    }
    setState(554);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(550);
      match(DaricParser::COMMA);
      setState(551);
      expression(0);
      setState(556);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(557);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordNewContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordNewContext::TypeSignatureRecordNewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordNewContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordNewContext::EQ() {
  return getTokens(DaricParser::EQ);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::EQ(size_t i) {
  return getToken(DaricParser::EQ, i);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureRecordNewContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureRecordNewContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordNewContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureRecordNewContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecordNew;
}


std::any DaricParser::TypeSignatureRecordNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecordNew(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordNewContext* DaricParser::typeSignatureRecordNew() {
  TypeSignatureRecordNewContext *_localctx = _tracker.createInstance<TypeSignatureRecordNewContext>(_ctx, getState());
  enterRule(_localctx, 80, DaricParser::RuleTypeSignatureRecordNew);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(559);
    match(DaricParser::IDENTIFIER);
    setState(560);
    match(DaricParser::COLON);
    setState(561);
    match(DaricParser::IDENTIFIER);
    setState(562);
    match(DaricParser::LPAREN);
    setState(566);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::IDENTIFIER) {
      setState(563);
      match(DaricParser::IDENTIFIER);
      setState(564);
      match(DaricParser::EQ);
      setState(565);
      expression(0);
    }
    setState(574);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(568);
      match(DaricParser::COMMA);
      setState(569);
      match(DaricParser::IDENTIFIER);
      setState(570);
      match(DaricParser::EQ);
      setState(571);
      expression(0);
      setState(576);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(577);
    match(DaricParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordArrayNewContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordArrayNewContext::TypeSignatureRecordArrayNewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayNewContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureRecordArrayNewContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureRecordArrayNewContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayNewContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureRecordArrayNewContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecordArrayNew;
}


std::any DaricParser::TypeSignatureRecordArrayNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecordArrayNew(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordArrayNewContext* DaricParser::typeSignatureRecordArrayNew() {
  TypeSignatureRecordArrayNewContext *_localctx = _tracker.createInstance<TypeSignatureRecordArrayNewContext>(_ctx, getState());
  enterRule(_localctx, 82, DaricParser::RuleTypeSignatureRecordArrayNew);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(579);
    match(DaricParser::IDENTIFIER);
    setState(580);
    match(DaricParser::COLON);
    setState(581);
    match(DaricParser::IDENTIFIER);
    setState(582);
    match(DaricParser::SOPEN);
    setState(584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(583);
      expression(0);
    }
    setState(590);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(586);
      match(DaricParser::COMMA);
      setState(587);
      expression(0);
      setState(592);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(593);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureListContext ------------------------------------------------------------------

DaricParser::TypeSignatureListContext::TypeSignatureListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::LIST() {
  return getToken(DaricParser::LIST, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureListContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureListContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureList;
}


std::any DaricParser::TypeSignatureListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureList(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureListContext* DaricParser::typeSignatureList() {
  TypeSignatureListContext *_localctx = _tracker.createInstance<TypeSignatureListContext>(_ctx, getState());
  enterRule(_localctx, 84, DaricParser::RuleTypeSignatureList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(595);
    match(DaricParser::IDENTIFIER);
    setState(596);
    match(DaricParser::COLON);
    setState(597);
    match(DaricParser::LIST);
    setState(598);
    match(DaricParser::SOPEN);
    setState(599);
    typeOrStruct();
    setState(600);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureVectorContext ------------------------------------------------------------------

DaricParser::TypeSignatureVectorContext::TypeSignatureVectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::VECTOR() {
  return getToken(DaricParser::VECTOR, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureVectorContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureVectorContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureVector;
}


std::any DaricParser::TypeSignatureVectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureVector(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureVectorContext* DaricParser::typeSignatureVector() {
  TypeSignatureVectorContext *_localctx = _tracker.createInstance<TypeSignatureVectorContext>(_ctx, getState());
  enterRule(_localctx, 86, DaricParser::RuleTypeSignatureVector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(602);
    match(DaricParser::IDENTIFIER);
    setState(603);
    match(DaricParser::COLON);
    setState(604);
    match(DaricParser::VECTOR);
    setState(605);
    match(DaricParser::SOPEN);
    setState(606);
    typeOrStruct();
    setState(607);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureSetContext ------------------------------------------------------------------

DaricParser::TypeSignatureSetContext::TypeSignatureSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::SET() {
  return getToken(DaricParser::SET, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureSetContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureSetContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureSet;
}


std::any DaricParser::TypeSignatureSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureSet(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureSetContext* DaricParser::typeSignatureSet() {
  TypeSignatureSetContext *_localctx = _tracker.createInstance<TypeSignatureSetContext>(_ctx, getState());
  enterRule(_localctx, 88, DaricParser::RuleTypeSignatureSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(609);
    match(DaricParser::IDENTIFIER);
    setState(610);
    match(DaricParser::COLON);
    setState(611);
    match(DaricParser::SET);
    setState(612);
    match(DaricParser::SOPEN);
    setState(613);
    type();
    setState(614);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureMapContext ------------------------------------------------------------------

DaricParser::TypeSignatureMapContext::TypeSignatureMapContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::MAP() {
  return getToken(DaricParser::MAP, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureMapContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::COMMA() {
  return getToken(DaricParser::COMMA, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureMapContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureMapContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureMap;
}


std::any DaricParser::TypeSignatureMapContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureMap(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureMapContext* DaricParser::typeSignatureMap() {
  TypeSignatureMapContext *_localctx = _tracker.createInstance<TypeSignatureMapContext>(_ctx, getState());
  enterRule(_localctx, 90, DaricParser::RuleTypeSignatureMap);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(DaricParser::IDENTIFIER);
    setState(617);
    match(DaricParser::COLON);
    setState(618);
    match(DaricParser::MAP);
    setState(619);
    match(DaricParser::SOPEN);
    setState(620);
    type();
    setState(621);
    match(DaricParser::COMMA);
    setState(622);
    typeOrStruct();
    setState(623);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureStackContext ------------------------------------------------------------------

DaricParser::TypeSignatureStackContext::TypeSignatureStackContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::STACK() {
  return getToken(DaricParser::STACK, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureStackContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureStackContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureStack;
}


std::any DaricParser::TypeSignatureStackContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureStack(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureStackContext* DaricParser::typeSignatureStack() {
  TypeSignatureStackContext *_localctx = _tracker.createInstance<TypeSignatureStackContext>(_ctx, getState());
  enterRule(_localctx, 92, DaricParser::RuleTypeSignatureStack);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(625);
    match(DaricParser::IDENTIFIER);
    setState(626);
    match(DaricParser::COLON);
    setState(627);
    match(DaricParser::STACK);
    setState(628);
    match(DaricParser::SOPEN);
    setState(629);
    typeOrStruct();
    setState(630);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureQueueContext ------------------------------------------------------------------

DaricParser::TypeSignatureQueueContext::TypeSignatureQueueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::QUEUE() {
  return getToken(DaricParser::QUEUE, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureQueueContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureQueueContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureQueue;
}


std::any DaricParser::TypeSignatureQueueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureQueue(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureQueueContext* DaricParser::typeSignatureQueue() {
  TypeSignatureQueueContext *_localctx = _tracker.createInstance<TypeSignatureQueueContext>(_ctx, getState());
  enterRule(_localctx, 94, DaricParser::RuleTypeSignatureQueue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(632);
    match(DaricParser::IDENTIFIER);
    setState(633);
    match(DaricParser::COLON);
    setState(634);
    match(DaricParser::QUEUE);
    setState(635);
    match(DaricParser::SOPEN);
    setState(636);
    typeOrStruct();
    setState(637);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureContext ------------------------------------------------------------------

DaricParser::TypeSignatureContext::TypeSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::TypeSignatureSingleContext* DaricParser::TypeSignatureContext::typeSignatureSingle() {
  return getRuleContext<DaricParser::TypeSignatureSingleContext>(0);
}

DaricParser::TypeSignatureArrayContext* DaricParser::TypeSignatureContext::typeSignatureArray() {
  return getRuleContext<DaricParser::TypeSignatureArrayContext>(0);
}

DaricParser::TypeSignatureRecordContext* DaricParser::TypeSignatureContext::typeSignatureRecord() {
  return getRuleContext<DaricParser::TypeSignatureRecordContext>(0);
}

DaricParser::TypeSignatureRecordArrayContext* DaricParser::TypeSignatureContext::typeSignatureRecordArray() {
  return getRuleContext<DaricParser::TypeSignatureRecordArrayContext>(0);
}


size_t DaricParser::TypeSignatureContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignature;
}


std::any DaricParser::TypeSignatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignature(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureContext* DaricParser::typeSignature() {
  TypeSignatureContext *_localctx = _tracker.createInstance<TypeSignatureContext>(_ctx, getState());
  enterRule(_localctx, 96, DaricParser::RuleTypeSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(643);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(639);
      typeSignatureSingle();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(640);
      typeSignatureArray();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(641);
      typeSignatureRecord();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(642);
      typeSignatureRecordArray();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureArrayOrCollectionContext ------------------------------------------------------------------

DaricParser::TypeSignatureArrayOrCollectionContext::TypeSignatureArrayOrCollectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::TypeSignatureArrayNewContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureArrayNew() {
  return getRuleContext<DaricParser::TypeSignatureArrayNewContext>(0);
}

DaricParser::TypeSignatureRecordNewContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureRecordNew() {
  return getRuleContext<DaricParser::TypeSignatureRecordNewContext>(0);
}

DaricParser::TypeSignatureRecordArrayNewContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureRecordArrayNew() {
  return getRuleContext<DaricParser::TypeSignatureRecordArrayNewContext>(0);
}

DaricParser::TypeSignatureListContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureList() {
  return getRuleContext<DaricParser::TypeSignatureListContext>(0);
}

DaricParser::TypeSignatureVectorContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureVector() {
  return getRuleContext<DaricParser::TypeSignatureVectorContext>(0);
}

DaricParser::TypeSignatureSetContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureSet() {
  return getRuleContext<DaricParser::TypeSignatureSetContext>(0);
}

DaricParser::TypeSignatureMapContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureMap() {
  return getRuleContext<DaricParser::TypeSignatureMapContext>(0);
}

DaricParser::TypeSignatureStackContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureStack() {
  return getRuleContext<DaricParser::TypeSignatureStackContext>(0);
}

DaricParser::TypeSignatureQueueContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureQueue() {
  return getRuleContext<DaricParser::TypeSignatureQueueContext>(0);
}


size_t DaricParser::TypeSignatureArrayOrCollectionContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureArrayOrCollection;
}


std::any DaricParser::TypeSignatureArrayOrCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureArrayOrCollection(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureArrayOrCollectionContext* DaricParser::typeSignatureArrayOrCollection() {
  TypeSignatureArrayOrCollectionContext *_localctx = _tracker.createInstance<TypeSignatureArrayOrCollectionContext>(_ctx, getState());
  enterRule(_localctx, 98, DaricParser::RuleTypeSignatureArrayOrCollection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(654);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(645);
      typeSignatureArrayNew();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(646);
      typeSignatureRecordNew();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(647);
      typeSignatureRecordArrayNew();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(648);
      typeSignatureList();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(649);
      typeSignatureVector();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(650);
      typeSignatureSet();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(651);
      typeSignatureMap();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(652);
      typeSignatureStack();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(653);
      typeSignatureQueue();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

DaricParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ExpressionContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::ExpressionContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

tree::TerminalNode* DaricParser::ExpressionContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MAIN() {
  return getToken(DaricParser::MAIN, 0);
}

DaricParser::LiteralContext* DaricParser::ExpressionContext::literal() {
  return getRuleContext<DaricParser::LiteralContext>(0);
}

DaricParser::ExprcallContext* DaricParser::ExpressionContext::exprcall() {
  return getRuleContext<DaricParser::ExprcallContext>(0);
}

DaricParser::TypeSignatureContext* DaricParser::ExpressionContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

DaricParser::VariableContext* DaricParser::ExpressionContext::variable() {
  return getRuleContext<DaricParser::VariableContext>(0);
}

tree::TerminalNode* DaricParser::ExpressionContext::HAS() {
  return getToken(DaricParser::HAS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MINUS() {
  return getToken(DaricParser::MINUS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::PLUS() {
  return getToken(DaricParser::PLUS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::INT() {
  return getToken(DaricParser::INT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::FLOAT() {
  return getToken(DaricParser::FLOAT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::STRING() {
  return getToken(DaricParser::STRING, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::WITH() {
  return getToken(DaricParser::WITH, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ABS() {
  return getToken(DaricParser::ABS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::COMP() {
  return getToken(DaricParser::COMP, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::NOT() {
  return getToken(DaricParser::NOT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::TRUE() {
  return getToken(DaricParser::TRUE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::FALSE() {
  return getToken(DaricParser::FALSE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::PI() {
  return getToken(DaricParser::PI, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::DEG() {
  return getToken(DaricParser::DEG, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::RAD() {
  return getToken(DaricParser::RAD, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SGN() {
  return getToken(DaricParser::SGN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ACS() {
  return getToken(DaricParser::ACS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ASN() {
  return getToken(DaricParser::ASN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ATN() {
  return getToken(DaricParser::ATN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::COS() {
  return getToken(DaricParser::COS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::EXP() {
  return getToken(DaricParser::EXP, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::FLOOR() {
  return getToken(DaricParser::FLOOR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ROUND() {
  return getToken(DaricParser::ROUND, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LN() {
  return getToken(DaricParser::LN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LOG() {
  return getToken(DaricParser::LOG, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SIN() {
  return getToken(DaricParser::SIN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SQR() {
  return getToken(DaricParser::SQR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::TAN() {
  return getToken(DaricParser::TAN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MIN() {
  return getToken(DaricParser::MIN, 0);
}

std::vector<tree::TerminalNode *> DaricParser::ExpressionContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::ExpressionContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

tree::TerminalNode* DaricParser::ExpressionContext::MAX() {
  return getToken(DaricParser::MAX, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ASC() {
  return getToken(DaricParser::ASC, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::CHR() {
  return getToken(DaricParser::CHR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::INSTR() {
  return getToken(DaricParser::INSTR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LEFT() {
  return getToken(DaricParser::LEFT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MID() {
  return getToken(DaricParser::MID, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::RIGHT() {
  return getToken(DaricParser::RIGHT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LEN() {
  return getToken(DaricParser::LEN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SIZE() {
  return getToken(DaricParser::SIZE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::HAT() {
  return getToken(DaricParser::HAT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::DIVIDE() {
  return getToken(DaricParser::DIVIDE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MULTIPLY() {
  return getToken(DaricParser::MULTIPLY, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::DIV() {
  return getToken(DaricParser::DIV, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MOD() {
  return getToken(DaricParser::MOD, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SHL() {
  return getToken(DaricParser::SHL, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SHR() {
  return getToken(DaricParser::SHR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::NE() {
  return getToken(DaricParser::NE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::GT() {
  return getToken(DaricParser::GT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::GE() {
  return getToken(DaricParser::GE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LT() {
  return getToken(DaricParser::LT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LE() {
  return getToken(DaricParser::LE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::AND() {
  return getToken(DaricParser::AND, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::OR() {
  return getToken(DaricParser::OR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::EOR() {
  return getToken(DaricParser::EOR, 0);
}


size_t DaricParser::ExpressionContext::getRuleIndex() const {
  return DaricParser::RuleExpression;
}


std::any DaricParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}


DaricParser::ExpressionContext* DaricParser::expression() {
   return expression(0);
}

DaricParser::ExpressionContext* DaricParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  DaricParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  DaricParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 100;
  enterRecursionRule(_localctx, 100, DaricParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(807);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(657);
      match(DaricParser::LPAREN);
      setState(658);
      expression(0);
      setState(659);
      match(DaricParser::RPAREN);
      break;
    }

    case 2: {
      setState(661);
      match(DaricParser::MAIN);
      break;
    }

    case 3: {
      setState(662);
      literal();
      break;
    }

    case 4: {
      setState(663);
      exprcall();
      break;
    }

    case 5: {
      setState(664);
      typeSignature();
      break;
    }

    case 6: {
      setState(665);
      variable();
      break;
    }

    case 7: {
      setState(666);
      variable();
      setState(667);
      match(DaricParser::HAS);
      setState(668);
      expression(55);
      break;
    }

    case 8: {
      setState(670);
      match(DaricParser::MINUS);
      setState(671);
      expression(54);
      break;
    }

    case 9: {
      setState(672);
      match(DaricParser::PLUS);
      setState(673);
      expression(53);
      break;
    }

    case 10: {
      setState(674);
      match(DaricParser::INT);
      setState(675);
      expression(52);
      break;
    }

    case 11: {
      setState(676);
      match(DaricParser::FLOAT);
      setState(677);
      expression(51);
      break;
    }

    case 12: {
      setState(678);
      match(DaricParser::STRING);
      setState(680);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
      case 1: {
        setState(679);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(682);
      expression(0);
      setState(685);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
      case 1: {
        setState(683);
        match(DaricParser::WITH);
        setState(684);
        expression(0);
        break;
      }

      default:
        break;
      }
      setState(688);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
      case 1: {
        setState(687);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 13: {
      setState(690);
      match(DaricParser::ABS);
      setState(691);
      expression(49);
      break;
    }

    case 14: {
      setState(692);
      match(DaricParser::COMP);
      setState(693);
      expression(48);
      break;
    }

    case 15: {
      setState(694);
      match(DaricParser::NOT);
      setState(695);
      expression(47);
      break;
    }

    case 16: {
      setState(696);
      match(DaricParser::TRUE);
      break;
    }

    case 17: {
      setState(697);
      match(DaricParser::FALSE);
      break;
    }

    case 18: {
      setState(698);
      match(DaricParser::PI);
      break;
    }

    case 19: {
      setState(699);
      match(DaricParser::DEG);
      setState(700);
      expression(43);
      break;
    }

    case 20: {
      setState(701);
      match(DaricParser::RAD);
      setState(702);
      expression(42);
      break;
    }

    case 21: {
      setState(703);
      match(DaricParser::SGN);
      setState(704);
      expression(41);
      break;
    }

    case 22: {
      setState(705);
      match(DaricParser::ACS);
      setState(706);
      expression(40);
      break;
    }

    case 23: {
      setState(707);
      match(DaricParser::ASN);
      setState(708);
      expression(39);
      break;
    }

    case 24: {
      setState(709);
      match(DaricParser::ATN);
      setState(710);
      expression(38);
      break;
    }

    case 25: {
      setState(711);
      match(DaricParser::COS);
      setState(712);
      expression(37);
      break;
    }

    case 26: {
      setState(713);
      match(DaricParser::EXP);
      setState(714);
      expression(36);
      break;
    }

    case 27: {
      setState(715);
      match(DaricParser::FLOOR);
      setState(716);
      expression(35);
      break;
    }

    case 28: {
      setState(717);
      match(DaricParser::ROUND);
      setState(718);
      expression(34);
      break;
    }

    case 29: {
      setState(719);
      match(DaricParser::LN);
      setState(720);
      expression(33);
      break;
    }

    case 30: {
      setState(721);
      match(DaricParser::LOG);
      setState(722);
      expression(32);
      break;
    }

    case 31: {
      setState(723);
      match(DaricParser::SIN);
      setState(724);
      expression(31);
      break;
    }

    case 32: {
      setState(725);
      match(DaricParser::SQR);
      setState(726);
      expression(30);
      break;
    }

    case 33: {
      setState(727);
      match(DaricParser::TAN);
      setState(728);
      expression(29);
      break;
    }

    case 34: {
      setState(729);
      match(DaricParser::MIN);
      setState(731);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
      case 1: {
        setState(730);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(733);
      expression(0);
      setState(734);
      match(DaricParser::COMMA);
      setState(735);
      expression(0);
      setState(737);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
      case 1: {
        setState(736);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 35: {
      setState(739);
      match(DaricParser::MAX);
      setState(741);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
      case 1: {
        setState(740);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(743);
      expression(0);
      setState(744);
      match(DaricParser::COMMA);
      setState(745);
      expression(0);
      setState(747);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
      case 1: {
        setState(746);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 36: {
      setState(749);
      match(DaricParser::ASC);
      setState(750);
      expression(26);
      break;
    }

    case 37: {
      setState(751);
      match(DaricParser::CHR);
      setState(752);
      expression(25);
      break;
    }

    case 38: {
      setState(753);
      match(DaricParser::INSTR);
      setState(755);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
      case 1: {
        setState(754);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(757);
      expression(0);
      setState(758);
      match(DaricParser::COMMA);
      setState(759);
      expression(0);
      setState(760);
      match(DaricParser::COMMA);
      setState(761);
      expression(0);
      setState(763);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
      case 1: {
        setState(762);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 39: {
      setState(765);
      match(DaricParser::LEFT);
      setState(767);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(766);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(769);
      expression(0);
      setState(770);
      match(DaricParser::COMMA);
      setState(771);
      expression(0);
      setState(773);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
      case 1: {
        setState(772);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 40: {
      setState(775);
      match(DaricParser::MID);
      setState(777);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
      case 1: {
        setState(776);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(779);
      expression(0);
      setState(780);
      match(DaricParser::COMMA);
      setState(781);
      expression(0);
      setState(782);
      match(DaricParser::COMMA);
      setState(783);
      expression(0);
      setState(785);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
      case 1: {
        setState(784);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 41: {
      setState(787);
      match(DaricParser::RIGHT);
      setState(789);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(788);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(791);
      expression(0);
      setState(792);
      match(DaricParser::COMMA);
      setState(793);
      expression(0);
      setState(795);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(794);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 42: {
      setState(797);
      match(DaricParser::LEN);
      setState(798);
      expression(20);
      break;
    }

    case 43: {
      setState(799);
      match(DaricParser::SIZE);
      setState(801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == DaricParser::LPAREN) {
        setState(800);
        match(DaricParser::LPAREN);
      }
      setState(803);
      variable();
      setState(805);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
      case 1: {
        setState(804);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(865);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(863);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(809);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(810);
          match(DaricParser::HAT);
          setState(811);
          expression(18);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(812);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(813);
          match(DaricParser::DIVIDE);
          setState(814);
          expression(18);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(815);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(816);
          match(DaricParser::MULTIPLY);
          setState(817);
          expression(17);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(818);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(819);
          match(DaricParser::DIV);
          setState(820);
          expression(16);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(821);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(822);
          match(DaricParser::MOD);
          setState(823);
          expression(15);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(824);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(825);
          match(DaricParser::PLUS);
          setState(826);
          expression(14);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(827);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(828);
          match(DaricParser::MINUS);
          setState(829);
          expression(13);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(830);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(831);
          match(DaricParser::SHL);
          setState(832);
          expression(12);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(833);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(834);
          match(DaricParser::SHR);
          setState(835);
          expression(11);
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(836);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(837);
          match(DaricParser::EQ);
          setState(838);
          expression(10);
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(839);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(840);
          match(DaricParser::NE);
          setState(841);
          expression(9);
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(842);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(843);
          match(DaricParser::GT);
          setState(844);
          expression(8);
          break;
        }

        case 13: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(845);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(846);
          match(DaricParser::GE);
          setState(847);
          expression(7);
          break;
        }

        case 14: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(848);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(849);
          match(DaricParser::LT);
          setState(850);
          expression(6);
          break;
        }

        case 15: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(851);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(852);
          match(DaricParser::LE);
          setState(853);
          expression(5);
          break;
        }

        case 16: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(854);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(855);
          match(DaricParser::AND);
          setState(856);
          expression(4);
          break;
        }

        case 17: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(857);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(858);
          match(DaricParser::OR);
          setState(859);
          expression(3);
          break;
        }

        case 18: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(860);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(861);
          match(DaricParser::EOR);
          setState(862);
          expression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(867);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

DaricParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeContext::BYTE() {
  return getToken(DaricParser::BYTE, 0);
}

tree::TerminalNode* DaricParser::TypeContext::FLOAT() {
  return getToken(DaricParser::FLOAT, 0);
}

tree::TerminalNode* DaricParser::TypeContext::INT() {
  return getToken(DaricParser::INT, 0);
}

tree::TerminalNode* DaricParser::TypeContext::STRING() {
  return getToken(DaricParser::STRING, 0);
}


size_t DaricParser::TypeContext::getRuleIndex() const {
  return DaricParser::RuleType;
}


std::any DaricParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeContext* DaricParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 102, DaricParser::RuleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(868);
    _la = _input->LA(1);
    if (!((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 15) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeOrStructContext ------------------------------------------------------------------

DaricParser::TypeOrStructContext::TypeOrStructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeOrStructContext::BYTE() {
  return getToken(DaricParser::BYTE, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::FLOAT() {
  return getToken(DaricParser::FLOAT, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::INT() {
  return getToken(DaricParser::INT, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::STRING() {
  return getToken(DaricParser::STRING, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}


size_t DaricParser::TypeOrStructContext::getRuleIndex() const {
  return DaricParser::RuleTypeOrStruct;
}


std::any DaricParser::TypeOrStructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeOrStruct(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeOrStructContext* DaricParser::typeOrStruct() {
  TypeOrStructContext *_localctx = _tracker.createInstance<TypeOrStructContext>(_ctx, getState());
  enterRule(_localctx, 104, DaricParser::RuleTypeOrStruct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(870);
    _la = _input->LA(1);
    if (!((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 35184372088847) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

DaricParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::FloatLiteralContext* DaricParser::LiteralContext::floatLiteral() {
  return getRuleContext<DaricParser::FloatLiteralContext>(0);
}

DaricParser::IntegerLiteralContext* DaricParser::LiteralContext::integerLiteral() {
  return getRuleContext<DaricParser::IntegerLiteralContext>(0);
}

DaricParser::StringLiteralContext* DaricParser::LiteralContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::LiteralContext::getRuleIndex() const {
  return DaricParser::RuleLiteral;
}


std::any DaricParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::LiteralContext* DaricParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 106, DaricParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(875);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(872);
      floatLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(873);
      integerLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(874);
      stringLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatLiteralContext ------------------------------------------------------------------

DaricParser::FloatLiteralContext::FloatLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::FloatLiteralContext::FLOATLITERAL() {
  return getToken(DaricParser::FLOATLITERAL, 0);
}

tree::TerminalNode* DaricParser::FloatLiteralContext::PLUS() {
  return getToken(DaricParser::PLUS, 0);
}

tree::TerminalNode* DaricParser::FloatLiteralContext::MINUS() {
  return getToken(DaricParser::MINUS, 0);
}


size_t DaricParser::FloatLiteralContext::getRuleIndex() const {
  return DaricParser::RuleFloatLiteral;
}


std::any DaricParser::FloatLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitFloatLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::FloatLiteralContext* DaricParser::floatLiteral() {
  FloatLiteralContext *_localctx = _tracker.createInstance<FloatLiteralContext>(_ctx, getState());
  enterRule(_localctx, 108, DaricParser::RuleFloatLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(878);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::PLUS

    || _la == DaricParser::MINUS) {
      setState(877);
      _la = _input->LA(1);
      if (!(_la == DaricParser::PLUS

      || _la == DaricParser::MINUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(880);
    match(DaricParser::FLOATLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

DaricParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::HEXNUMBER() {
  return getToken(DaricParser::HEXNUMBER, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::BINARYNUMBER() {
  return getToken(DaricParser::BINARYNUMBER, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::INTEGERLITERAL() {
  return getToken(DaricParser::INTEGERLITERAL, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::PLUS() {
  return getToken(DaricParser::PLUS, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::MINUS() {
  return getToken(DaricParser::MINUS, 0);
}


size_t DaricParser::IntegerLiteralContext::getRuleIndex() const {
  return DaricParser::RuleIntegerLiteral;
}


std::any DaricParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::IntegerLiteralContext* DaricParser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 110, DaricParser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(888);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case DaricParser::HEXNUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(882);
        match(DaricParser::HEXNUMBER);
        break;
      }

      case DaricParser::BINARYNUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(883);
        match(DaricParser::BINARYNUMBER);
        break;
      }

      case DaricParser::PLUS:
      case DaricParser::MINUS:
      case DaricParser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(885);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == DaricParser::PLUS

        || _la == DaricParser::MINUS) {
          setState(884);
          _la = _input->LA(1);
          if (!(_la == DaricParser::PLUS

          || _la == DaricParser::MINUS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(887);
        match(DaricParser::INTEGERLITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

DaricParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::StringLiteralContext::STRINGLITERAL() {
  return getToken(DaricParser::STRINGLITERAL, 0);
}


size_t DaricParser::StringLiteralContext::getRuleIndex() const {
  return DaricParser::RuleStringLiteral;
}


std::any DaricParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StringLiteralContext* DaricParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 112, DaricParser::RuleStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(890);
    match(DaricParser::STRINGLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool DaricParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 50: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool DaricParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 18);
    case 1: return precpred(_ctx, 17);
    case 2: return precpred(_ctx, 16);
    case 3: return precpred(_ctx, 15);
    case 4: return precpred(_ctx, 14);
    case 5: return precpred(_ctx, 13);
    case 6: return precpred(_ctx, 12);
    case 7: return precpred(_ctx, 11);
    case 8: return precpred(_ctx, 10);
    case 9: return precpred(_ctx, 9);
    case 10: return precpred(_ctx, 8);
    case 11: return precpred(_ctx, 7);
    case 12: return precpred(_ctx, 6);
    case 13: return precpred(_ctx, 5);
    case 14: return precpred(_ctx, 4);
    case 15: return precpred(_ctx, 3);
    case 16: return precpred(_ctx, 2);
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void DaricParser::initialize() {
  ::antlr4::internal::call_once(daricParserOnceFlag, daricParserInitialize);
}
