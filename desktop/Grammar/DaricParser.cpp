
// Generated from Daric.g4 by ANTLR 4.11.1


#include "DaricVisitor.h"

#include "DaricParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct DaricParserStaticData final {
  DaricParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  DaricParserStaticData(const DaricParserStaticData&) = delete;
  DaricParserStaticData(DaricParserStaticData&&) = delete;
  DaricParserStaticData& operator=(const DaricParserStaticData&) = delete;
  DaricParserStaticData& operator=(DaricParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag daricParserOnceFlag;
DaricParserStaticData *daricParserStaticData = nullptr;

void daricParserInitialize() {
  assert(daricParserStaticData == nullptr);
  auto staticData = std::make_unique<DaricParserStaticData>(
    std::vector<std::string>{
      "program", "statements", "statementsl", "statement", "separator", 
      "assign", "call", "case", "const", "data", "dataLabel", "dim", "exprcall", 
      "end", "for", "importlib", "if", "ifml", "input", "option", "parameter", 
      "print", "procedure", "repeat", "read", "restore", "return", "struct", 
      "swap", "when", "while", "clear", "get", "set", "typeSignatureSingle", 
      "typeSignatureArray", "typeSignatureRecord", "typeSignatureRecordArray", 
      "typeSignatureArrayNew", "typeSignatureRecordNew", "typeSignatureRecordArrayNew", 
      "typeSignatureList", "typeSignatureVector", "typeSignatureSet", "typeSignatureMap", 
      "typeSignatureStack", "typeSignatureQueue", "typeSignature", "typeSignatureArrayOrCollection", 
      "expression", "type", "typeOrStruct", "literal", "floatLiteral", "integerLiteral", 
      "stringLiteral"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'$'", 
      "'#'", "':'", "';'", "'.'", "','", "'''", "", "'%'", "'_'", "'('", 
      "')'", "'['", "']'", "'<-'", "'->'", "'='", "'<>'", "'>'", "'>='", 
      "'<'", "'<='", "'^'", "'+'", "'-'", "'*'", "'/'", "'<<'", "'>>'", 
      "", "", "'~'"
    },
    std::vector<std::string>{
      "", "BlockComment", "LineComment", "AT", "CASE", "CONST", "CLEAR", 
      "DATA", "DATALABEL", "DEF", "DIM", "ELSE", "END", "FOR", "FROM", "HAS", 
      "IF", "IMPORT", "INPUT", "INTO", "LET", "NEXT", "OF", "OPTION", "OTHERWISE", 
      "PRINT", "QUIT", "READ", "RECORD", "REF", "REM", "REPEAT", "RESTORE", 
      "RETURN", "THEN", "SIZE", "STEP", "SYS", "SWAP", "TO", "UNTIL", "WHEN", 
      "WITH", "WHILE", "MAIN", "ABS", "ACS", "ASN", "ATN", "COS", "DEG", 
      "EXP", "FLOOR", "LN", "LOG", "MIN", "MAX", "PI", "RAD", "ROUND", "SGN", 
      "SIN", "SQR", "TAN", "VECTOR", "LIST", "MAP", "STACK", "QUEUE", "SET", 
      "FALSE", "TRUE", "ASC", "CHR", "INSTR", "LEFT", "MID", "RIGHT", "LEN", 
      "BYTE", "INT", "FLOAT", "STRING", "DOLLAR", "HASH", "COLON", "SEMICOLON", 
      "DOT", "COMMA", "QUOTE", "NEWLINE", "PERCENT", "UNDERSCORE", "LPAREN", 
      "RPAREN", "SOPEN", "SCLOSE", "ASSIGNL", "ASSIGNR", "EQ", "NE", "GT", 
      "GE", "LT", "LE", "HAT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "SHL", 
      "SHR", "MOD", "DIV", "COMP", "NOT", "AND", "OR", "EOR", "STRINGLITERAL", 
      "HEXNUMBER", "BINARYNUMBER", "FLOATLITERAL", "INTEGERLITERAL", "IDENTIFIER", 
      "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,125,867,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,
  	0,1,0,1,1,4,1,117,8,1,11,1,12,1,118,1,1,5,1,122,8,1,10,1,12,1,125,9,1,
  	1,1,1,1,1,1,3,1,130,8,1,5,1,132,8,1,10,1,12,1,135,9,1,3,1,137,8,1,1,2,
  	5,2,140,8,2,10,2,12,2,143,9,2,1,2,1,2,3,2,147,8,2,4,2,149,8,2,11,2,12,
  	2,150,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,179,8,3,1,4,4,4,182,8,4,11,
  	4,12,4,183,1,5,3,5,187,8,5,1,5,1,5,1,5,1,5,1,6,1,6,3,6,195,8,6,1,6,3,
  	6,198,8,6,1,6,1,6,5,6,202,8,6,10,6,12,6,205,9,6,1,6,3,6,208,8,6,1,7,1,
  	7,1,7,1,7,3,7,214,8,7,1,7,5,7,217,8,7,10,7,12,7,220,9,7,1,7,1,7,3,7,224,
  	8,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,238,8,9,10,9,
  	12,9,241,9,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,3,12,252,8,
  	12,1,12,1,12,5,12,256,8,12,10,12,12,12,259,9,12,1,12,1,12,1,13,1,13,1,
  	14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,273,8,14,1,14,1,14,1,14,1,
  	15,1,15,1,15,1,16,1,16,1,16,3,16,284,8,16,1,16,1,16,1,16,3,16,289,8,16,
  	1,17,1,17,1,17,3,17,294,8,17,1,17,1,17,1,17,1,17,1,17,3,17,301,8,17,1,
  	17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,3,19,314,8,19,1,
  	20,3,20,317,8,20,1,20,1,20,1,20,1,20,3,20,323,8,20,3,20,325,8,20,1,21,
  	1,21,3,21,329,8,21,1,21,1,21,3,21,333,8,21,1,21,3,21,336,8,21,1,21,3,
  	21,339,8,21,3,21,341,8,21,1,22,1,22,1,22,1,22,3,22,347,8,22,1,22,3,22,
  	350,8,22,1,22,5,22,353,8,22,10,22,12,22,356,9,22,1,22,3,22,359,8,22,1,
  	22,1,22,5,22,363,8,22,10,22,12,22,366,9,22,1,22,5,22,369,8,22,10,22,12,
  	22,372,9,22,1,22,3,22,375,8,22,1,22,5,22,378,8,22,10,22,12,22,381,9,22,
  	1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
  	1,25,1,26,1,26,3,26,400,8,26,1,27,1,27,1,27,5,27,405,8,27,10,27,12,27,
  	408,9,27,1,27,1,27,1,27,1,27,4,27,414,8,27,11,27,12,27,415,1,27,1,27,
  	1,27,5,27,421,8,27,10,27,12,27,424,9,27,1,27,5,27,427,8,27,10,27,12,27,
  	430,9,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
  	5,29,444,8,29,10,29,12,29,447,9,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
  	1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,3,33,466,8,33,1,33,
  	1,33,1,33,1,34,1,34,1,34,3,34,474,8,34,1,35,1,35,1,35,3,35,479,8,35,1,
  	35,1,35,3,35,483,8,35,1,35,1,35,5,35,487,8,35,10,35,12,35,490,9,35,1,
  	35,1,35,1,36,1,36,1,36,4,36,497,8,36,11,36,12,36,498,1,37,1,37,1,37,3,
  	37,504,8,37,1,37,1,37,5,37,508,8,37,10,37,12,37,511,9,37,1,37,1,37,1,
  	37,4,37,516,8,37,11,37,12,37,517,1,38,1,38,1,38,1,38,1,38,3,38,525,8,
  	38,1,38,1,38,5,38,529,8,38,10,38,12,38,532,9,38,1,38,1,38,1,39,1,39,1,
  	39,1,39,1,39,1,39,1,39,3,39,543,8,39,1,39,1,39,1,39,1,39,5,39,549,8,39,
  	10,39,12,39,552,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,561,8,40,
  	1,40,1,40,5,40,565,8,40,10,40,12,40,568,9,40,1,40,1,40,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
  	1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,
  	1,47,1,47,1,47,3,47,620,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,3,48,631,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,655,
  	8,49,1,49,1,49,1,49,3,49,660,8,49,1,49,3,49,663,8,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,706,8,49,1,49,1,
  	49,1,49,1,49,3,49,712,8,49,1,49,1,49,3,49,716,8,49,1,49,1,49,1,49,1,49,
  	3,49,722,8,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,730,8,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,3,49,738,8,49,1,49,1,49,3,49,742,8,49,1,49,1,49,1,49,
  	1,49,3,49,748,8,49,1,49,1,49,3,49,752,8,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,3,49,760,8,49,1,49,1,49,3,49,764,8,49,1,49,1,49,1,49,1,49,3,49,770,
  	8,49,1,49,1,49,1,49,1,49,3,49,776,8,49,1,49,1,49,3,49,780,8,49,3,49,782,
  	8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,
  	838,8,49,10,49,12,49,841,9,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,3,52,
  	850,8,52,1,53,3,53,853,8,53,1,53,1,53,1,54,1,54,1,54,3,54,860,8,54,1,
  	54,3,54,863,8,54,1,55,1,55,1,55,0,1,98,56,0,2,4,6,8,10,12,14,16,18,20,
  	22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
  	68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
  	0,5,1,1,85,85,2,0,85,85,90,90,1,0,79,82,2,0,79,82,124,124,1,0,106,107,
  	992,0,112,1,0,0,0,2,136,1,0,0,0,4,148,1,0,0,0,6,178,1,0,0,0,8,181,1,0,
  	0,0,10,186,1,0,0,0,12,192,1,0,0,0,14,209,1,0,0,0,16,228,1,0,0,0,18,233,
  	1,0,0,0,20,242,1,0,0,0,22,245,1,0,0,0,24,248,1,0,0,0,26,262,1,0,0,0,28,
  	264,1,0,0,0,30,277,1,0,0,0,32,280,1,0,0,0,34,290,1,0,0,0,36,306,1,0,0,
  	0,38,309,1,0,0,0,40,316,1,0,0,0,42,326,1,0,0,0,44,342,1,0,0,0,46,386,
  	1,0,0,0,48,391,1,0,0,0,50,394,1,0,0,0,52,397,1,0,0,0,54,401,1,0,0,0,56,
  	434,1,0,0,0,58,439,1,0,0,0,60,450,1,0,0,0,62,456,1,0,0,0,64,459,1,0,0,
  	0,66,465,1,0,0,0,68,470,1,0,0,0,70,475,1,0,0,0,72,493,1,0,0,0,74,500,
  	1,0,0,0,76,519,1,0,0,0,78,535,1,0,0,0,80,555,1,0,0,0,82,571,1,0,0,0,84,
  	578,1,0,0,0,86,585,1,0,0,0,88,592,1,0,0,0,90,601,1,0,0,0,92,608,1,0,0,
  	0,94,619,1,0,0,0,96,630,1,0,0,0,98,781,1,0,0,0,100,842,1,0,0,0,102,844,
  	1,0,0,0,104,849,1,0,0,0,106,852,1,0,0,0,108,862,1,0,0,0,110,864,1,0,0,
  	0,112,113,3,2,1,0,113,114,5,0,0,1,114,1,1,0,0,0,115,117,3,8,4,0,116,115,
  	1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,137,1,0,0,
  	0,120,122,3,8,4,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,
  	124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,129,3,6,3,0,127,130,3,
  	8,4,0,128,130,5,0,0,1,129,127,1,0,0,0,129,128,1,0,0,0,129,130,1,0,0,0,
  	130,132,1,0,0,0,131,123,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,
  	1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,136,116,1,0,0,0,136,133,1,0,0,
  	0,137,3,1,0,0,0,138,140,5,85,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,
  	139,1,0,0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,146,3,
  	6,3,0,145,147,7,0,0,0,146,145,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,
  	148,141,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,5,
  	1,0,0,0,152,179,3,10,5,0,153,179,3,12,6,0,154,179,3,14,7,0,155,179,3,
  	62,31,0,156,179,3,16,8,0,157,179,3,18,9,0,158,179,3,20,10,0,159,179,3,
  	22,11,0,160,179,3,26,13,0,161,179,3,28,14,0,162,179,3,64,32,0,163,179,
  	3,32,16,0,164,179,3,34,17,0,165,179,3,36,18,0,166,179,3,30,15,0,167,179,
  	3,38,19,0,168,179,3,44,22,0,169,179,3,42,21,0,170,179,3,48,24,0,171,179,
  	3,46,23,0,172,179,3,50,25,0,173,179,3,52,26,0,174,179,3,66,33,0,175,179,
  	3,54,27,0,176,179,3,56,28,0,177,179,3,60,30,0,178,152,1,0,0,0,178,153,
  	1,0,0,0,178,154,1,0,0,0,178,155,1,0,0,0,178,156,1,0,0,0,178,157,1,0,0,
  	0,178,158,1,0,0,0,178,159,1,0,0,0,178,160,1,0,0,0,178,161,1,0,0,0,178,
  	162,1,0,0,0,178,163,1,0,0,0,178,164,1,0,0,0,178,165,1,0,0,0,178,166,1,
  	0,0,0,178,167,1,0,0,0,178,168,1,0,0,0,178,169,1,0,0,0,178,170,1,0,0,0,
  	178,171,1,0,0,0,178,172,1,0,0,0,178,173,1,0,0,0,178,174,1,0,0,0,178,175,
  	1,0,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,7,1,0,0,0,180,182,7,1,0,0,
  	181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,9,
  	1,0,0,0,185,187,5,20,0,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,
  	0,0,188,189,3,94,47,0,189,190,5,99,0,0,190,191,3,98,49,0,191,11,1,0,0,
  	0,192,194,5,124,0,0,193,195,5,93,0,0,194,193,1,0,0,0,194,195,1,0,0,0,
  	195,197,1,0,0,0,196,198,3,98,49,0,197,196,1,0,0,0,197,198,1,0,0,0,198,
  	203,1,0,0,0,199,200,5,88,0,0,200,202,3,98,49,0,201,199,1,0,0,0,202,205,
  	1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,
  	0,206,208,5,94,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,13,1,0,0,0,209,
  	210,5,4,0,0,210,211,3,98,49,0,211,213,5,22,0,0,212,214,3,8,4,0,213,212,
  	1,0,0,0,213,214,1,0,0,0,214,218,1,0,0,0,215,217,3,58,29,0,216,215,1,0,
  	0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,223,1,0,0,0,220,
  	218,1,0,0,0,221,222,5,24,0,0,222,224,3,2,1,0,223,221,1,0,0,0,223,224,
  	1,0,0,0,224,225,1,0,0,0,225,226,5,12,0,0,226,227,5,4,0,0,227,15,1,0,0,
  	0,228,229,5,5,0,0,229,230,3,94,47,0,230,231,5,99,0,0,231,232,3,104,52,
  	0,232,17,1,0,0,0,233,234,5,7,0,0,234,239,3,108,54,0,235,236,5,88,0,0,
  	236,238,3,108,54,0,237,235,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,
  	240,1,0,0,0,240,19,1,0,0,0,241,239,1,0,0,0,242,243,5,8,0,0,243,244,3,
  	110,55,0,244,21,1,0,0,0,245,246,5,10,0,0,246,247,3,96,48,0,247,23,1,0,
  	0,0,248,249,5,124,0,0,249,251,5,93,0,0,250,252,3,98,49,0,251,250,1,0,
  	0,0,251,252,1,0,0,0,252,257,1,0,0,0,253,254,5,88,0,0,254,256,3,98,49,
  	0,255,253,1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,
  	260,1,0,0,0,259,257,1,0,0,0,260,261,5,94,0,0,261,25,1,0,0,0,262,263,5,
  	26,0,0,263,27,1,0,0,0,264,265,5,13,0,0,265,266,3,94,47,0,266,267,5,99,
  	0,0,267,268,3,98,49,0,268,269,5,39,0,0,269,272,3,98,49,0,270,271,5,36,
  	0,0,271,273,3,98,49,0,272,270,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,
  	274,275,3,2,1,0,275,276,5,21,0,0,276,29,1,0,0,0,277,278,5,17,0,0,278,
  	279,3,110,55,0,279,31,1,0,0,0,280,281,5,16,0,0,281,283,3,98,49,0,282,
  	284,5,34,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,288,
  	3,4,2,0,286,287,5,11,0,0,287,289,3,4,2,0,288,286,1,0,0,0,288,289,1,0,
  	0,0,289,33,1,0,0,0,290,291,5,16,0,0,291,293,3,98,49,0,292,294,5,34,0,
  	0,293,292,1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,90,0,0,296,
  	300,3,2,1,0,297,298,5,11,0,0,298,299,5,90,0,0,299,301,3,2,1,0,300,297,
  	1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,303,5,90,0,0,303,304,5,12,
  	0,0,304,305,5,16,0,0,305,35,1,0,0,0,306,307,5,18,0,0,307,308,3,94,47,
  	0,308,37,1,0,0,0,309,310,5,23,0,0,310,313,5,124,0,0,311,314,5,124,0,0,
  	312,314,3,108,54,0,313,311,1,0,0,0,313,312,1,0,0,0,314,39,1,0,0,0,315,
  	317,5,29,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,324,
  	5,124,0,0,319,322,5,85,0,0,320,323,3,100,50,0,321,323,5,124,0,0,322,320,
  	1,0,0,0,322,321,1,0,0,0,323,325,1,0,0,0,324,319,1,0,0,0,324,325,1,0,0,
  	0,325,41,1,0,0,0,326,328,5,25,0,0,327,329,5,37,0,0,328,327,1,0,0,0,328,
  	329,1,0,0,0,329,340,1,0,0,0,330,335,3,98,49,0,331,333,5,42,0,0,332,331,
  	1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,336,3,98,49,0,335,332,1,0,
  	0,0,335,336,1,0,0,0,336,338,1,0,0,0,337,339,5,86,0,0,338,337,1,0,0,0,
  	338,339,1,0,0,0,339,341,1,0,0,0,340,330,1,0,0,0,340,341,1,0,0,0,341,43,
  	1,0,0,0,342,343,5,9,0,0,343,346,5,124,0,0,344,345,5,85,0,0,345,347,3,
  	100,50,0,346,344,1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,350,5,93,
  	0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,354,1,0,0,0,351,353,5,90,0,0,
  	352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,358,
  	1,0,0,0,356,354,1,0,0,0,357,359,3,40,20,0,358,357,1,0,0,0,358,359,1,0,
  	0,0,359,370,1,0,0,0,360,364,5,88,0,0,361,363,5,90,0,0,362,361,1,0,0,0,
  	363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,367,1,0,0,0,366,364,
  	1,0,0,0,367,369,3,40,20,0,368,360,1,0,0,0,369,372,1,0,0,0,370,368,1,0,
  	0,0,370,371,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,373,375,5,94,0,0,
  	374,373,1,0,0,0,374,375,1,0,0,0,375,379,1,0,0,0,376,378,3,8,4,0,377,376,
  	1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,382,1,0,0,
  	0,381,379,1,0,0,0,382,383,3,2,1,0,383,384,5,12,0,0,384,385,5,9,0,0,385,
  	45,1,0,0,0,386,387,5,31,0,0,387,388,3,2,1,0,388,389,5,40,0,0,389,390,
  	3,98,49,0,390,47,1,0,0,0,391,392,5,27,0,0,392,393,3,94,47,0,393,49,1,
  	0,0,0,394,395,5,32,0,0,395,396,3,110,55,0,396,51,1,0,0,0,397,399,5,33,
  	0,0,398,400,3,98,49,0,399,398,1,0,0,0,399,400,1,0,0,0,400,53,1,0,0,0,
  	401,402,5,28,0,0,402,406,5,124,0,0,403,405,5,90,0,0,404,403,1,0,0,0,405,
  	408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,406,1,
  	0,0,0,409,410,5,124,0,0,410,411,5,85,0,0,411,422,3,102,51,0,412,414,5,
  	90,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,
  	0,416,417,1,0,0,0,417,418,5,124,0,0,418,419,5,85,0,0,419,421,3,102,51,
  	0,420,413,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,
  	428,1,0,0,0,424,422,1,0,0,0,425,427,5,90,0,0,426,425,1,0,0,0,427,430,
  	1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,
  	0,431,432,5,12,0,0,432,433,5,28,0,0,433,55,1,0,0,0,434,435,5,38,0,0,435,
  	436,3,94,47,0,436,437,5,88,0,0,437,438,3,94,47,0,438,57,1,0,0,0,439,440,
  	5,41,0,0,440,445,3,98,49,0,441,442,5,88,0,0,442,444,3,98,49,0,443,441,
  	1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,448,1,0,0,
  	0,447,445,1,0,0,0,448,449,3,2,1,0,449,59,1,0,0,0,450,451,5,43,0,0,451,
  	452,3,98,49,0,452,453,3,2,1,0,453,454,5,12,0,0,454,455,5,43,0,0,455,61,
  	1,0,0,0,456,457,5,6,0,0,457,458,5,124,0,0,458,63,1,0,0,0,459,460,3,94,
  	47,0,460,461,5,97,0,0,461,462,5,124,0,0,462,65,1,0,0,0,463,466,3,94,47,
  	0,464,466,3,98,49,0,465,463,1,0,0,0,465,464,1,0,0,0,466,467,1,0,0,0,467,
  	468,5,98,0,0,468,469,5,124,0,0,469,67,1,0,0,0,470,473,5,124,0,0,471,472,
  	5,85,0,0,472,474,3,100,50,0,473,471,1,0,0,0,473,474,1,0,0,0,474,69,1,
  	0,0,0,475,478,5,124,0,0,476,477,5,85,0,0,477,479,3,100,50,0,478,476,1,
  	0,0,0,478,479,1,0,0,0,479,480,1,0,0,0,480,482,5,95,0,0,481,483,3,98,49,
  	0,482,481,1,0,0,0,482,483,1,0,0,0,483,488,1,0,0,0,484,485,5,88,0,0,485,
  	487,3,98,49,0,486,484,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,
  	1,0,0,0,489,491,1,0,0,0,490,488,1,0,0,0,491,492,5,96,0,0,492,71,1,0,0,
  	0,493,496,5,124,0,0,494,495,5,87,0,0,495,497,5,124,0,0,496,494,1,0,0,
  	0,497,498,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,73,1,0,0,0,500,
  	501,5,124,0,0,501,503,5,95,0,0,502,504,3,98,49,0,503,502,1,0,0,0,503,
  	504,1,0,0,0,504,509,1,0,0,0,505,506,5,88,0,0,506,508,3,98,49,0,507,505,
  	1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,1,0,0,
  	0,511,509,1,0,0,0,512,515,5,96,0,0,513,514,5,87,0,0,514,516,5,124,0,0,
  	515,513,1,0,0,0,516,517,1,0,0,0,517,515,1,0,0,0,517,518,1,0,0,0,518,75,
  	1,0,0,0,519,520,5,124,0,0,520,521,5,85,0,0,521,522,3,100,50,0,522,524,
  	5,95,0,0,523,525,3,98,49,0,524,523,1,0,0,0,524,525,1,0,0,0,525,530,1,
  	0,0,0,526,527,5,88,0,0,527,529,3,98,49,0,528,526,1,0,0,0,529,532,1,0,
  	0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,530,1,0,0,0,533,
  	534,5,96,0,0,534,77,1,0,0,0,535,536,5,124,0,0,536,537,5,85,0,0,537,538,
  	5,124,0,0,538,542,5,93,0,0,539,540,5,124,0,0,540,541,5,99,0,0,541,543,
  	3,98,49,0,542,539,1,0,0,0,542,543,1,0,0,0,543,550,1,0,0,0,544,545,5,88,
  	0,0,545,546,5,124,0,0,546,547,5,99,0,0,547,549,3,98,49,0,548,544,1,0,
  	0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,
  	550,1,0,0,0,553,554,5,94,0,0,554,79,1,0,0,0,555,556,5,124,0,0,556,557,
  	5,85,0,0,557,558,5,124,0,0,558,560,5,95,0,0,559,561,3,98,49,0,560,559,
  	1,0,0,0,560,561,1,0,0,0,561,566,1,0,0,0,562,563,5,88,0,0,563,565,3,98,
  	49,0,564,562,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,
  	567,569,1,0,0,0,568,566,1,0,0,0,569,570,5,96,0,0,570,81,1,0,0,0,571,572,
  	5,124,0,0,572,573,5,85,0,0,573,574,5,65,0,0,574,575,5,95,0,0,575,576,
  	3,102,51,0,576,577,5,96,0,0,577,83,1,0,0,0,578,579,5,124,0,0,579,580,
  	5,85,0,0,580,581,5,64,0,0,581,582,5,95,0,0,582,583,3,102,51,0,583,584,
  	5,96,0,0,584,85,1,0,0,0,585,586,5,124,0,0,586,587,5,85,0,0,587,588,5,
  	69,0,0,588,589,5,95,0,0,589,590,3,100,50,0,590,591,5,96,0,0,591,87,1,
  	0,0,0,592,593,5,124,0,0,593,594,5,85,0,0,594,595,5,66,0,0,595,596,5,95,
  	0,0,596,597,3,100,50,0,597,598,5,88,0,0,598,599,3,102,51,0,599,600,5,
  	96,0,0,600,89,1,0,0,0,601,602,5,124,0,0,602,603,5,85,0,0,603,604,5,67,
  	0,0,604,605,5,95,0,0,605,606,3,102,51,0,606,607,5,96,0,0,607,91,1,0,0,
  	0,608,609,5,124,0,0,609,610,5,85,0,0,610,611,5,68,0,0,611,612,5,95,0,
  	0,612,613,3,102,51,0,613,614,5,96,0,0,614,93,1,0,0,0,615,620,3,68,34,
  	0,616,620,3,70,35,0,617,620,3,72,36,0,618,620,3,74,37,0,619,615,1,0,0,
  	0,619,616,1,0,0,0,619,617,1,0,0,0,619,618,1,0,0,0,620,95,1,0,0,0,621,
  	631,3,76,38,0,622,631,3,78,39,0,623,631,3,80,40,0,624,631,3,82,41,0,625,
  	631,3,84,42,0,626,631,3,86,43,0,627,631,3,88,44,0,628,631,3,90,45,0,629,
  	631,3,92,46,0,630,621,1,0,0,0,630,622,1,0,0,0,630,623,1,0,0,0,630,624,
  	1,0,0,0,630,625,1,0,0,0,630,626,1,0,0,0,630,627,1,0,0,0,630,628,1,0,0,
  	0,630,629,1,0,0,0,631,97,1,0,0,0,632,633,6,49,-1,0,633,634,5,93,0,0,634,
  	635,3,98,49,0,635,636,5,94,0,0,636,782,1,0,0,0,637,782,5,44,0,0,638,782,
  	3,104,52,0,639,782,3,24,12,0,640,782,3,94,47,0,641,642,5,124,0,0,642,
  	643,5,15,0,0,643,782,3,98,49,55,644,645,5,107,0,0,645,782,3,98,49,54,
  	646,647,5,106,0,0,647,782,3,98,49,53,648,649,5,80,0,0,649,782,3,98,49,
  	52,650,651,5,81,0,0,651,782,3,98,49,51,652,654,5,82,0,0,653,655,5,93,
  	0,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,659,3,98,49,0,
  	657,658,5,42,0,0,658,660,3,98,49,0,659,657,1,0,0,0,659,660,1,0,0,0,660,
  	662,1,0,0,0,661,663,5,94,0,0,662,661,1,0,0,0,662,663,1,0,0,0,663,782,
  	1,0,0,0,664,665,5,45,0,0,665,782,3,98,49,49,666,667,5,114,0,0,667,782,
  	3,98,49,48,668,669,5,115,0,0,669,782,3,98,49,47,670,782,5,71,0,0,671,
  	782,5,70,0,0,672,782,5,57,0,0,673,674,5,50,0,0,674,782,3,98,49,43,675,
  	676,5,58,0,0,676,782,3,98,49,42,677,678,5,60,0,0,678,782,3,98,49,41,679,
  	680,5,46,0,0,680,782,3,98,49,40,681,682,5,47,0,0,682,782,3,98,49,39,683,
  	684,5,48,0,0,684,782,3,98,49,38,685,686,5,49,0,0,686,782,3,98,49,37,687,
  	688,5,51,0,0,688,782,3,98,49,36,689,690,5,52,0,0,690,782,3,98,49,35,691,
  	692,5,59,0,0,692,782,3,98,49,34,693,694,5,53,0,0,694,782,3,98,49,33,695,
  	696,5,54,0,0,696,782,3,98,49,32,697,698,5,61,0,0,698,782,3,98,49,31,699,
  	700,5,62,0,0,700,782,3,98,49,30,701,702,5,63,0,0,702,782,3,98,49,29,703,
  	705,5,55,0,0,704,706,5,93,0,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,
  	1,0,0,0,707,708,3,98,49,0,708,709,5,88,0,0,709,711,3,98,49,0,710,712,
  	5,94,0,0,711,710,1,0,0,0,711,712,1,0,0,0,712,782,1,0,0,0,713,715,5,56,
  	0,0,714,716,5,93,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,717,1,0,0,0,
  	717,718,3,98,49,0,718,719,5,88,0,0,719,721,3,98,49,0,720,722,5,94,0,0,
  	721,720,1,0,0,0,721,722,1,0,0,0,722,782,1,0,0,0,723,724,5,72,0,0,724,
  	782,3,98,49,26,725,726,5,73,0,0,726,782,3,98,49,25,727,729,5,74,0,0,728,
  	730,5,93,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,1,0,0,0,731,732,
  	3,98,49,0,732,733,5,88,0,0,733,734,3,98,49,0,734,735,5,88,0,0,735,737,
  	3,98,49,0,736,738,5,94,0,0,737,736,1,0,0,0,737,738,1,0,0,0,738,782,1,
  	0,0,0,739,741,5,75,0,0,740,742,5,93,0,0,741,740,1,0,0,0,741,742,1,0,0,
  	0,742,743,1,0,0,0,743,744,3,98,49,0,744,745,5,88,0,0,745,747,3,98,49,
  	0,746,748,5,94,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,782,1,0,0,0,749,
  	751,5,76,0,0,750,752,5,93,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,
  	1,0,0,0,753,754,3,98,49,0,754,755,5,88,0,0,755,756,3,98,49,0,756,757,
  	5,88,0,0,757,759,3,98,49,0,758,760,5,94,0,0,759,758,1,0,0,0,759,760,1,
  	0,0,0,760,782,1,0,0,0,761,763,5,77,0,0,762,764,5,93,0,0,763,762,1,0,0,
  	0,763,764,1,0,0,0,764,765,1,0,0,0,765,766,3,98,49,0,766,767,5,88,0,0,
  	767,769,3,98,49,0,768,770,5,94,0,0,769,768,1,0,0,0,769,770,1,0,0,0,770,
  	782,1,0,0,0,771,772,5,78,0,0,772,782,3,98,49,20,773,775,5,35,0,0,774,
  	776,5,93,0,0,775,774,1,0,0,0,775,776,1,0,0,0,776,777,1,0,0,0,777,779,
  	5,124,0,0,778,780,5,94,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,
  	0,0,0,781,632,1,0,0,0,781,637,1,0,0,0,781,638,1,0,0,0,781,639,1,0,0,0,
  	781,640,1,0,0,0,781,641,1,0,0,0,781,644,1,0,0,0,781,646,1,0,0,0,781,648,
  	1,0,0,0,781,650,1,0,0,0,781,652,1,0,0,0,781,664,1,0,0,0,781,666,1,0,0,
  	0,781,668,1,0,0,0,781,670,1,0,0,0,781,671,1,0,0,0,781,672,1,0,0,0,781,
  	673,1,0,0,0,781,675,1,0,0,0,781,677,1,0,0,0,781,679,1,0,0,0,781,681,1,
  	0,0,0,781,683,1,0,0,0,781,685,1,0,0,0,781,687,1,0,0,0,781,689,1,0,0,0,
  	781,691,1,0,0,0,781,693,1,0,0,0,781,695,1,0,0,0,781,697,1,0,0,0,781,699,
  	1,0,0,0,781,701,1,0,0,0,781,703,1,0,0,0,781,713,1,0,0,0,781,723,1,0,0,
  	0,781,725,1,0,0,0,781,727,1,0,0,0,781,739,1,0,0,0,781,749,1,0,0,0,781,
  	761,1,0,0,0,781,771,1,0,0,0,781,773,1,0,0,0,782,839,1,0,0,0,783,784,10,
  	18,0,0,784,785,5,105,0,0,785,838,3,98,49,18,786,787,10,17,0,0,787,788,
  	5,109,0,0,788,838,3,98,49,18,789,790,10,16,0,0,790,791,5,108,0,0,791,
  	838,3,98,49,17,792,793,10,15,0,0,793,794,5,113,0,0,794,838,3,98,49,16,
  	795,796,10,14,0,0,796,797,5,112,0,0,797,838,3,98,49,15,798,799,10,13,
  	0,0,799,800,5,106,0,0,800,838,3,98,49,14,801,802,10,12,0,0,802,803,5,
  	107,0,0,803,838,3,98,49,13,804,805,10,11,0,0,805,806,5,110,0,0,806,838,
  	3,98,49,12,807,808,10,10,0,0,808,809,5,111,0,0,809,838,3,98,49,11,810,
  	811,10,9,0,0,811,812,5,99,0,0,812,838,3,98,49,10,813,814,10,8,0,0,814,
  	815,5,100,0,0,815,838,3,98,49,9,816,817,10,7,0,0,817,818,5,101,0,0,818,
  	838,3,98,49,8,819,820,10,6,0,0,820,821,5,102,0,0,821,838,3,98,49,7,822,
  	823,10,5,0,0,823,824,5,103,0,0,824,838,3,98,49,6,825,826,10,4,0,0,826,
  	827,5,104,0,0,827,838,3,98,49,5,828,829,10,3,0,0,829,830,5,116,0,0,830,
  	838,3,98,49,4,831,832,10,2,0,0,832,833,5,117,0,0,833,838,3,98,49,3,834,
  	835,10,1,0,0,835,836,5,118,0,0,836,838,3,98,49,2,837,783,1,0,0,0,837,
  	786,1,0,0,0,837,789,1,0,0,0,837,792,1,0,0,0,837,795,1,0,0,0,837,798,1,
  	0,0,0,837,801,1,0,0,0,837,804,1,0,0,0,837,807,1,0,0,0,837,810,1,0,0,0,
  	837,813,1,0,0,0,837,816,1,0,0,0,837,819,1,0,0,0,837,822,1,0,0,0,837,825,
  	1,0,0,0,837,828,1,0,0,0,837,831,1,0,0,0,837,834,1,0,0,0,838,841,1,0,0,
  	0,839,837,1,0,0,0,839,840,1,0,0,0,840,99,1,0,0,0,841,839,1,0,0,0,842,
  	843,7,2,0,0,843,101,1,0,0,0,844,845,7,3,0,0,845,103,1,0,0,0,846,850,3,
  	106,53,0,847,850,3,108,54,0,848,850,3,110,55,0,849,846,1,0,0,0,849,847,
  	1,0,0,0,849,848,1,0,0,0,850,105,1,0,0,0,851,853,7,4,0,0,852,851,1,0,0,
  	0,852,853,1,0,0,0,853,854,1,0,0,0,854,855,5,122,0,0,855,107,1,0,0,0,856,
  	863,5,120,0,0,857,863,5,121,0,0,858,860,7,4,0,0,859,858,1,0,0,0,859,860,
  	1,0,0,0,860,861,1,0,0,0,861,863,5,123,0,0,862,856,1,0,0,0,862,857,1,0,
  	0,0,862,859,1,0,0,0,863,109,1,0,0,0,864,865,5,119,0,0,865,111,1,0,0,0,
  	90,118,123,129,133,136,141,146,150,178,183,186,194,197,203,207,213,218,
  	223,239,251,257,272,283,288,293,300,313,316,322,324,328,332,335,338,340,
  	346,349,354,358,364,370,374,379,399,406,415,422,428,445,465,473,478,482,
  	488,498,503,509,517,524,530,542,550,560,566,619,630,654,659,662,705,711,
  	715,721,729,737,741,747,751,759,763,769,775,779,781,837,839,849,852,859,
  	862
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  daricParserStaticData = staticData.release();
}

}

DaricParser::DaricParser(TokenStream *input) : DaricParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

DaricParser::DaricParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  DaricParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *daricParserStaticData->atn, daricParserStaticData->decisionToDFA, daricParserStaticData->sharedContextCache, options);
}

DaricParser::~DaricParser() {
  delete _interpreter;
}

const atn::ATN& DaricParser::getATN() const {
  return *daricParserStaticData->atn;
}

std::string DaricParser::getGrammarFileName() const {
  return "Daric.g4";
}

const std::vector<std::string>& DaricParser::getRuleNames() const {
  return daricParserStaticData->ruleNames;
}

const dfa::Vocabulary& DaricParser::getVocabulary() const {
  return daricParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView DaricParser::getSerializedATN() const {
  return daricParserStaticData->serializedATN;
}


//----------------- ProgramContext ------------------------------------------------------------------

DaricParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::StatementsContext* DaricParser::ProgramContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::ProgramContext::EOF() {
  return getToken(DaricParser::EOF, 0);
}


size_t DaricParser::ProgramContext::getRuleIndex() const {
  return DaricParser::RuleProgram;
}


std::any DaricParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ProgramContext* DaricParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 0, DaricParser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(112);
    statements();
    setState(113);
    match(DaricParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementsContext ------------------------------------------------------------------

DaricParser::StatementsContext::StatementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<DaricParser::SeparatorContext *> DaricParser::StatementsContext::separator() {
  return getRuleContexts<DaricParser::SeparatorContext>();
}

DaricParser::SeparatorContext* DaricParser::StatementsContext::separator(size_t i) {
  return getRuleContext<DaricParser::SeparatorContext>(i);
}

std::vector<DaricParser::StatementContext *> DaricParser::StatementsContext::statement() {
  return getRuleContexts<DaricParser::StatementContext>();
}

DaricParser::StatementContext* DaricParser::StatementsContext::statement(size_t i) {
  return getRuleContext<DaricParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::StatementsContext::EOF() {
  return getTokens(DaricParser::EOF);
}

tree::TerminalNode* DaricParser::StatementsContext::EOF(size_t i) {
  return getToken(DaricParser::EOF, i);
}


size_t DaricParser::StatementsContext::getRuleIndex() const {
  return DaricParser::RuleStatements;
}


std::any DaricParser::StatementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStatements(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StatementsContext* DaricParser::statements() {
  StatementsContext *_localctx = _tracker.createInstance<StatementsContext>(_ctx, getState());
  enterRule(_localctx, 2, DaricParser::RuleStatements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(136);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(116); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(115);
                separator();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(118); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(133);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(123);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == DaricParser::COLON

          || _la == DaricParser::NEWLINE) {
            setState(120);
            separator();
            setState(125);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(126);
          statement();
          setState(129);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
          case 1: {
            setState(127);
            separator();
            break;
          }

          case 2: {
            setState(128);
            match(DaricParser::EOF);
            break;
          }

          default:
            break;
          } 
        }
        setState(135);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementslContext ------------------------------------------------------------------

DaricParser::StatementslContext::StatementslContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<DaricParser::StatementContext *> DaricParser::StatementslContext::statement() {
  return getRuleContexts<DaricParser::StatementContext>();
}

DaricParser::StatementContext* DaricParser::StatementslContext::statement(size_t i) {
  return getRuleContext<DaricParser::StatementContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::StatementslContext::COLON() {
  return getTokens(DaricParser::COLON);
}

tree::TerminalNode* DaricParser::StatementslContext::COLON(size_t i) {
  return getToken(DaricParser::COLON, i);
}

std::vector<tree::TerminalNode *> DaricParser::StatementslContext::EOF() {
  return getTokens(DaricParser::EOF);
}

tree::TerminalNode* DaricParser::StatementslContext::EOF(size_t i) {
  return getToken(DaricParser::EOF, i);
}


size_t DaricParser::StatementslContext::getRuleIndex() const {
  return DaricParser::RuleStatementsl;
}


std::any DaricParser::StatementslContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStatementsl(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StatementslContext* DaricParser::statementsl() {
  StatementslContext *_localctx = _tracker.createInstance<StatementslContext>(_ctx, getState());
  enterRule(_localctx, 4, DaricParser::RuleStatementsl);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(148); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(141);
              _errHandler->sync(this);
              _la = _input->LA(1);
              while (_la == DaricParser::COLON) {
                setState(138);
                match(DaricParser::COLON);
                setState(143);
                _errHandler->sync(this);
                _la = _input->LA(1);
              }
              setState(144);
              statement();
              setState(146);
              _errHandler->sync(this);

              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
              case 1: {
                setState(145);
                _la = _input->LA(1);
                if (!(_la == DaricParser::EOF || _la == DaricParser::COLON)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(150); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

DaricParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::AssignContext* DaricParser::StatementContext::assign() {
  return getRuleContext<DaricParser::AssignContext>(0);
}

DaricParser::CallContext* DaricParser::StatementContext::call() {
  return getRuleContext<DaricParser::CallContext>(0);
}

DaricParser::CaseContext* DaricParser::StatementContext::case_() {
  return getRuleContext<DaricParser::CaseContext>(0);
}

DaricParser::ClearContext* DaricParser::StatementContext::clear() {
  return getRuleContext<DaricParser::ClearContext>(0);
}

DaricParser::ConstContext* DaricParser::StatementContext::const_() {
  return getRuleContext<DaricParser::ConstContext>(0);
}

DaricParser::DataContext* DaricParser::StatementContext::data() {
  return getRuleContext<DaricParser::DataContext>(0);
}

DaricParser::DataLabelContext* DaricParser::StatementContext::dataLabel() {
  return getRuleContext<DaricParser::DataLabelContext>(0);
}

DaricParser::DimContext* DaricParser::StatementContext::dim() {
  return getRuleContext<DaricParser::DimContext>(0);
}

DaricParser::EndContext* DaricParser::StatementContext::end() {
  return getRuleContext<DaricParser::EndContext>(0);
}

DaricParser::ForContext* DaricParser::StatementContext::for_() {
  return getRuleContext<DaricParser::ForContext>(0);
}

DaricParser::GetContext* DaricParser::StatementContext::get() {
  return getRuleContext<DaricParser::GetContext>(0);
}

DaricParser::IfContext* DaricParser::StatementContext::if_() {
  return getRuleContext<DaricParser::IfContext>(0);
}

DaricParser::IfmlContext* DaricParser::StatementContext::ifml() {
  return getRuleContext<DaricParser::IfmlContext>(0);
}

DaricParser::InputContext* DaricParser::StatementContext::input() {
  return getRuleContext<DaricParser::InputContext>(0);
}

DaricParser::ImportlibContext* DaricParser::StatementContext::importlib() {
  return getRuleContext<DaricParser::ImportlibContext>(0);
}

DaricParser::OptionContext* DaricParser::StatementContext::option() {
  return getRuleContext<DaricParser::OptionContext>(0);
}

DaricParser::ProcedureContext* DaricParser::StatementContext::procedure() {
  return getRuleContext<DaricParser::ProcedureContext>(0);
}

DaricParser::PrintContext* DaricParser::StatementContext::print() {
  return getRuleContext<DaricParser::PrintContext>(0);
}

DaricParser::ReadContext* DaricParser::StatementContext::read() {
  return getRuleContext<DaricParser::ReadContext>(0);
}

DaricParser::RepeatContext* DaricParser::StatementContext::repeat() {
  return getRuleContext<DaricParser::RepeatContext>(0);
}

DaricParser::RestoreContext* DaricParser::StatementContext::restore() {
  return getRuleContext<DaricParser::RestoreContext>(0);
}

DaricParser::ReturnContext* DaricParser::StatementContext::return_() {
  return getRuleContext<DaricParser::ReturnContext>(0);
}

DaricParser::SetContext* DaricParser::StatementContext::set() {
  return getRuleContext<DaricParser::SetContext>(0);
}

DaricParser::StructContext* DaricParser::StatementContext::struct_() {
  return getRuleContext<DaricParser::StructContext>(0);
}

DaricParser::SwapContext* DaricParser::StatementContext::swap() {
  return getRuleContext<DaricParser::SwapContext>(0);
}

DaricParser::WhileContext* DaricParser::StatementContext::while_() {
  return getRuleContext<DaricParser::WhileContext>(0);
}


size_t DaricParser::StatementContext::getRuleIndex() const {
  return DaricParser::RuleStatement;
}


std::any DaricParser::StatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStatement(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StatementContext* DaricParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 6, DaricParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(178);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 8, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(152);
      assign();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(153);
      call();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(154);
      case_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(155);
      clear();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(156);
      const_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(157);
      data();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(158);
      dataLabel();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(159);
      dim();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(160);
      end();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(161);
      for_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(162);
      get();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(163);
      if_();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(164);
      ifml();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(165);
      input();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(166);
      importlib();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(167);
      option();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(168);
      procedure();
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(169);
      print();
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(170);
      read();
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(171);
      repeat();
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(172);
      restore();
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(173);
      return_();
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(174);
      set();
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(175);
      struct_();
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(176);
      swap();
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(177);
      while_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SeparatorContext ------------------------------------------------------------------

DaricParser::SeparatorContext::SeparatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::SeparatorContext::COLON() {
  return getTokens(DaricParser::COLON);
}

tree::TerminalNode* DaricParser::SeparatorContext::COLON(size_t i) {
  return getToken(DaricParser::COLON, i);
}

std::vector<tree::TerminalNode *> DaricParser::SeparatorContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::SeparatorContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}


size_t DaricParser::SeparatorContext::getRuleIndex() const {
  return DaricParser::RuleSeparator;
}


std::any DaricParser::SeparatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitSeparator(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::SeparatorContext* DaricParser::separator() {
  SeparatorContext *_localctx = _tracker.createInstance<SeparatorContext>(_ctx, getState());
  enterRule(_localctx, 8, DaricParser::RuleSeparator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(181); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(180);
              _la = _input->LA(1);
              if (!(_la == DaricParser::COLON

              || _la == DaricParser::NEWLINE)) {
              _errHandler->recoverInline(this);
              }
              else {
                _errHandler->reportMatch(this);
                consume();
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(183); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

DaricParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::TypeSignatureContext* DaricParser::AssignContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::AssignContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

DaricParser::ExpressionContext* DaricParser::AssignContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

tree::TerminalNode* DaricParser::AssignContext::LET() {
  return getToken(DaricParser::LET, 0);
}


size_t DaricParser::AssignContext::getRuleIndex() const {
  return DaricParser::RuleAssign;
}


std::any DaricParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::AssignContext* DaricParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 10, DaricParser::RuleAssign);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::LET) {
      setState(185);
      match(DaricParser::LET);
    }
    setState(188);
    typeSignature();
    setState(189);
    match(DaricParser::EQ);
    setState(190);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallContext ------------------------------------------------------------------

DaricParser::CallContext::CallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::CallContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::CallContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::CallContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::CallContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::CallContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

tree::TerminalNode* DaricParser::CallContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

tree::TerminalNode* DaricParser::CallContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}


size_t DaricParser::CallContext::getRuleIndex() const {
  return DaricParser::RuleCall;
}


std::any DaricParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::CallContext* DaricParser::call() {
  CallContext *_localctx = _tracker.createInstance<CallContext>(_ctx, getState());
  enterRule(_localctx, 12, DaricParser::RuleCall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(192);
    match(DaricParser::IDENTIFIER);
    setState(194);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
    case 1: {
      setState(193);
      antlrcpp::downCast<CallContext *>(_localctx)->name = match(DaricParser::LPAREN);
      break;
    }

    default:
      break;
    }
    setState(197);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(196);
      expression(0);
      break;
    }

    default:
      break;
    }
    setState(203);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(199);
      match(DaricParser::COMMA);
      setState(200);
      expression(0);
      setState(205);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::RPAREN) {
      setState(206);
      antlrcpp::downCast<CallContext *>(_localctx)->name = match(DaricParser::RPAREN);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaseContext ------------------------------------------------------------------

DaricParser::CaseContext::CaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::CaseContext::CASE() {
  return getTokens(DaricParser::CASE);
}

tree::TerminalNode* DaricParser::CaseContext::CASE(size_t i) {
  return getToken(DaricParser::CASE, i);
}

DaricParser::ExpressionContext* DaricParser::CaseContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

tree::TerminalNode* DaricParser::CaseContext::OF() {
  return getToken(DaricParser::OF, 0);
}

tree::TerminalNode* DaricParser::CaseContext::END() {
  return getToken(DaricParser::END, 0);
}

DaricParser::SeparatorContext* DaricParser::CaseContext::separator() {
  return getRuleContext<DaricParser::SeparatorContext>(0);
}

std::vector<DaricParser::WhenContext *> DaricParser::CaseContext::when() {
  return getRuleContexts<DaricParser::WhenContext>();
}

DaricParser::WhenContext* DaricParser::CaseContext::when(size_t i) {
  return getRuleContext<DaricParser::WhenContext>(i);
}

tree::TerminalNode* DaricParser::CaseContext::OTHERWISE() {
  return getToken(DaricParser::OTHERWISE, 0);
}

DaricParser::StatementsContext* DaricParser::CaseContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}


size_t DaricParser::CaseContext::getRuleIndex() const {
  return DaricParser::RuleCase;
}


std::any DaricParser::CaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitCase(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::CaseContext* DaricParser::case_() {
  CaseContext *_localctx = _tracker.createInstance<CaseContext>(_ctx, getState());
  enterRule(_localctx, 14, DaricParser::RuleCase);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(209);
    match(DaricParser::CASE);
    setState(210);
    expression(0);
    setState(211);
    match(DaricParser::OF);
    setState(213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::COLON

    || _la == DaricParser::NEWLINE) {
      setState(212);
      separator();
    }
    setState(218);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::WHEN) {
      setState(215);
      when();
      setState(220);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::OTHERWISE) {
      setState(221);
      match(DaricParser::OTHERWISE);
      setState(222);
      statements();
    }
    setState(225);
    match(DaricParser::END);
    setState(226);
    match(DaricParser::CASE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstContext ------------------------------------------------------------------

DaricParser::ConstContext::ConstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ConstContext::CONST() {
  return getToken(DaricParser::CONST, 0);
}

DaricParser::TypeSignatureContext* DaricParser::ConstContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::ConstContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

DaricParser::LiteralContext* DaricParser::ConstContext::literal() {
  return getRuleContext<DaricParser::LiteralContext>(0);
}


size_t DaricParser::ConstContext::getRuleIndex() const {
  return DaricParser::RuleConst;
}


std::any DaricParser::ConstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitConst(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ConstContext* DaricParser::const_() {
  ConstContext *_localctx = _tracker.createInstance<ConstContext>(_ctx, getState());
  enterRule(_localctx, 16, DaricParser::RuleConst);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(228);
    match(DaricParser::CONST);
    setState(229);
    typeSignature();
    setState(230);
    match(DaricParser::EQ);
    setState(231);
    literal();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataContext ------------------------------------------------------------------

DaricParser::DataContext::DataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::DataContext::DATA() {
  return getToken(DaricParser::DATA, 0);
}

std::vector<DaricParser::IntegerLiteralContext *> DaricParser::DataContext::integerLiteral() {
  return getRuleContexts<DaricParser::IntegerLiteralContext>();
}

DaricParser::IntegerLiteralContext* DaricParser::DataContext::integerLiteral(size_t i) {
  return getRuleContext<DaricParser::IntegerLiteralContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::DataContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::DataContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::DataContext::getRuleIndex() const {
  return DaricParser::RuleData;
}


std::any DaricParser::DataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitData(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::DataContext* DaricParser::data() {
  DataContext *_localctx = _tracker.createInstance<DataContext>(_ctx, getState());
  enterRule(_localctx, 18, DaricParser::RuleData);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(233);
    match(DaricParser::DATA);
    setState(234);
    integerLiteral();
    setState(239);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(235);
      match(DaricParser::COMMA);
      setState(236);
      integerLiteral();
      setState(241);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataLabelContext ------------------------------------------------------------------

DaricParser::DataLabelContext::DataLabelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::DataLabelContext::DATALABEL() {
  return getToken(DaricParser::DATALABEL, 0);
}

DaricParser::StringLiteralContext* DaricParser::DataLabelContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::DataLabelContext::getRuleIndex() const {
  return DaricParser::RuleDataLabel;
}


std::any DaricParser::DataLabelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitDataLabel(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::DataLabelContext* DaricParser::dataLabel() {
  DataLabelContext *_localctx = _tracker.createInstance<DataLabelContext>(_ctx, getState());
  enterRule(_localctx, 20, DaricParser::RuleDataLabel);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(242);
    match(DaricParser::DATALABEL);
    setState(243);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DimContext ------------------------------------------------------------------

DaricParser::DimContext::DimContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::DimContext::DIM() {
  return getToken(DaricParser::DIM, 0);
}

DaricParser::TypeSignatureArrayOrCollectionContext* DaricParser::DimContext::typeSignatureArrayOrCollection() {
  return getRuleContext<DaricParser::TypeSignatureArrayOrCollectionContext>(0);
}


size_t DaricParser::DimContext::getRuleIndex() const {
  return DaricParser::RuleDim;
}


std::any DaricParser::DimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitDim(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::DimContext* DaricParser::dim() {
  DimContext *_localctx = _tracker.createInstance<DimContext>(_ctx, getState());
  enterRule(_localctx, 22, DaricParser::RuleDim);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(245);
    match(DaricParser::DIM);
    setState(246);
    typeSignatureArrayOrCollection();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprcallContext ------------------------------------------------------------------

DaricParser::ExprcallContext::ExprcallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ExprcallContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::ExprcallContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

tree::TerminalNode* DaricParser::ExprcallContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::ExprcallContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::ExprcallContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::ExprcallContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::ExprcallContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::ExprcallContext::getRuleIndex() const {
  return DaricParser::RuleExprcall;
}


std::any DaricParser::ExprcallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitExprcall(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ExprcallContext* DaricParser::exprcall() {
  ExprcallContext *_localctx = _tracker.createInstance<ExprcallContext>(_ctx, getState());
  enterRule(_localctx, 24, DaricParser::RuleExprcall);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(248);
    match(DaricParser::IDENTIFIER);
    setState(249);
    match(DaricParser::LPAREN);
    setState(251);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(250);
      expression(0);
    }
    setState(257);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(253);
      match(DaricParser::COMMA);
      setState(254);
      expression(0);
      setState(259);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(260);
    match(DaricParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EndContext ------------------------------------------------------------------

DaricParser::EndContext::EndContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::EndContext::QUIT() {
  return getToken(DaricParser::QUIT, 0);
}


size_t DaricParser::EndContext::getRuleIndex() const {
  return DaricParser::RuleEnd;
}


std::any DaricParser::EndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitEnd(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::EndContext* DaricParser::end() {
  EndContext *_localctx = _tracker.createInstance<EndContext>(_ctx, getState());
  enterRule(_localctx, 26, DaricParser::RuleEnd);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(262);
    match(DaricParser::QUIT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForContext ------------------------------------------------------------------

DaricParser::ForContext::ForContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ForContext::FOR() {
  return getToken(DaricParser::FOR, 0);
}

DaricParser::TypeSignatureContext* DaricParser::ForContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::ForContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::ForContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::ForContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

tree::TerminalNode* DaricParser::ForContext::TO() {
  return getToken(DaricParser::TO, 0);
}

DaricParser::StatementsContext* DaricParser::ForContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::ForContext::NEXT() {
  return getToken(DaricParser::NEXT, 0);
}

tree::TerminalNode* DaricParser::ForContext::STEP() {
  return getToken(DaricParser::STEP, 0);
}


size_t DaricParser::ForContext::getRuleIndex() const {
  return DaricParser::RuleFor;
}


std::any DaricParser::ForContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitFor(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ForContext* DaricParser::for_() {
  ForContext *_localctx = _tracker.createInstance<ForContext>(_ctx, getState());
  enterRule(_localctx, 28, DaricParser::RuleFor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(264);
    match(DaricParser::FOR);
    setState(265);
    typeSignature();
    setState(266);
    match(DaricParser::EQ);
    setState(267);
    expression(0);
    setState(268);
    match(DaricParser::TO);
    setState(269);
    expression(0);
    setState(272);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::STEP) {
      setState(270);
      match(DaricParser::STEP);
      setState(271);
      expression(0);
    }
    setState(274);
    statements();
    setState(275);
    match(DaricParser::NEXT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ImportlibContext ------------------------------------------------------------------

DaricParser::ImportlibContext::ImportlibContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ImportlibContext::IMPORT() {
  return getToken(DaricParser::IMPORT, 0);
}

DaricParser::StringLiteralContext* DaricParser::ImportlibContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::ImportlibContext::getRuleIndex() const {
  return DaricParser::RuleImportlib;
}


std::any DaricParser::ImportlibContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitImportlib(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ImportlibContext* DaricParser::importlib() {
  ImportlibContext *_localctx = _tracker.createInstance<ImportlibContext>(_ctx, getState());
  enterRule(_localctx, 30, DaricParser::RuleImportlib);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(277);
    match(DaricParser::IMPORT);
    setState(278);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

DaricParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::IfContext::IF() {
  return getToken(DaricParser::IF, 0);
}

DaricParser::ExpressionContext* DaricParser::IfContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

std::vector<DaricParser::StatementslContext *> DaricParser::IfContext::statementsl() {
  return getRuleContexts<DaricParser::StatementslContext>();
}

DaricParser::StatementslContext* DaricParser::IfContext::statementsl(size_t i) {
  return getRuleContext<DaricParser::StatementslContext>(i);
}

tree::TerminalNode* DaricParser::IfContext::THEN() {
  return getToken(DaricParser::THEN, 0);
}

tree::TerminalNode* DaricParser::IfContext::ELSE() {
  return getToken(DaricParser::ELSE, 0);
}


size_t DaricParser::IfContext::getRuleIndex() const {
  return DaricParser::RuleIf;
}


std::any DaricParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::IfContext* DaricParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 32, DaricParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(280);
    match(DaricParser::IF);
    setState(281);
    expression(0);
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::THEN) {
      setState(282);
      match(DaricParser::THEN);
    }
    setState(285);
    statementsl();
    setState(288);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(286);
      match(DaricParser::ELSE);
      setState(287);
      statementsl();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfmlContext ------------------------------------------------------------------

DaricParser::IfmlContext::IfmlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::IfmlContext::IF() {
  return getTokens(DaricParser::IF);
}

tree::TerminalNode* DaricParser::IfmlContext::IF(size_t i) {
  return getToken(DaricParser::IF, i);
}

DaricParser::ExpressionContext* DaricParser::IfmlContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

std::vector<tree::TerminalNode *> DaricParser::IfmlContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::IfmlContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}

std::vector<DaricParser::StatementsContext *> DaricParser::IfmlContext::statements() {
  return getRuleContexts<DaricParser::StatementsContext>();
}

DaricParser::StatementsContext* DaricParser::IfmlContext::statements(size_t i) {
  return getRuleContext<DaricParser::StatementsContext>(i);
}

tree::TerminalNode* DaricParser::IfmlContext::END() {
  return getToken(DaricParser::END, 0);
}

tree::TerminalNode* DaricParser::IfmlContext::THEN() {
  return getToken(DaricParser::THEN, 0);
}

tree::TerminalNode* DaricParser::IfmlContext::ELSE() {
  return getToken(DaricParser::ELSE, 0);
}


size_t DaricParser::IfmlContext::getRuleIndex() const {
  return DaricParser::RuleIfml;
}


std::any DaricParser::IfmlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitIfml(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::IfmlContext* DaricParser::ifml() {
  IfmlContext *_localctx = _tracker.createInstance<IfmlContext>(_ctx, getState());
  enterRule(_localctx, 34, DaricParser::RuleIfml);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(290);
    match(DaricParser::IF);
    setState(291);
    expression(0);
    setState(293);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::THEN) {
      setState(292);
      match(DaricParser::THEN);
    }
    setState(295);
    match(DaricParser::NEWLINE);
    setState(296);
    statements();
    setState(300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::ELSE) {
      setState(297);
      match(DaricParser::ELSE);
      setState(298);
      match(DaricParser::NEWLINE);
      setState(299);
      statements();
    }
    setState(302);
    match(DaricParser::NEWLINE);
    setState(303);
    match(DaricParser::END);
    setState(304);
    match(DaricParser::IF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InputContext ------------------------------------------------------------------

DaricParser::InputContext::InputContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::InputContext::INPUT() {
  return getToken(DaricParser::INPUT, 0);
}

DaricParser::TypeSignatureContext* DaricParser::InputContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}


size_t DaricParser::InputContext::getRuleIndex() const {
  return DaricParser::RuleInput;
}


std::any DaricParser::InputContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitInput(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::InputContext* DaricParser::input() {
  InputContext *_localctx = _tracker.createInstance<InputContext>(_ctx, getState());
  enterRule(_localctx, 36, DaricParser::RuleInput);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(306);
    match(DaricParser::INPUT);
    setState(307);
    typeSignature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionContext ------------------------------------------------------------------

DaricParser::OptionContext::OptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::OptionContext::OPTION() {
  return getToken(DaricParser::OPTION, 0);
}

std::vector<tree::TerminalNode *> DaricParser::OptionContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::OptionContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

DaricParser::IntegerLiteralContext* DaricParser::OptionContext::integerLiteral() {
  return getRuleContext<DaricParser::IntegerLiteralContext>(0);
}


size_t DaricParser::OptionContext::getRuleIndex() const {
  return DaricParser::RuleOption;
}


std::any DaricParser::OptionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitOption(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::OptionContext* DaricParser::option() {
  OptionContext *_localctx = _tracker.createInstance<OptionContext>(_ctx, getState());
  enterRule(_localctx, 38, DaricParser::RuleOption);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(309);
    match(DaricParser::OPTION);
    setState(310);
    match(DaricParser::IDENTIFIER);
    setState(313);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case DaricParser::IDENTIFIER: {
        setState(311);
        match(DaricParser::IDENTIFIER);
        break;
      }

      case DaricParser::PLUS:
      case DaricParser::MINUS:
      case DaricParser::HEXNUMBER:
      case DaricParser::BINARYNUMBER:
      case DaricParser::INTEGERLITERAL: {
        setState(312);
        integerLiteral();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterContext ------------------------------------------------------------------

DaricParser::ParameterContext::ParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::ParameterContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::ParameterContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::ParameterContext::REF() {
  return getToken(DaricParser::REF, 0);
}

tree::TerminalNode* DaricParser::ParameterContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::ParameterContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}


size_t DaricParser::ParameterContext::getRuleIndex() const {
  return DaricParser::RuleParameter;
}


std::any DaricParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ParameterContext* DaricParser::parameter() {
  ParameterContext *_localctx = _tracker.createInstance<ParameterContext>(_ctx, getState());
  enterRule(_localctx, 40, DaricParser::RuleParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(316);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::REF) {
      setState(315);
      match(DaricParser::REF);
    }
    setState(318);
    match(DaricParser::IDENTIFIER);
    setState(324);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(319);
      match(DaricParser::COLON);
      setState(322);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case DaricParser::BYTE:
        case DaricParser::INT:
        case DaricParser::FLOAT:
        case DaricParser::STRING: {
          setState(320);
          type();
          break;
        }

        case DaricParser::IDENTIFIER: {
          setState(321);
          match(DaricParser::IDENTIFIER);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrintContext ------------------------------------------------------------------

DaricParser::PrintContext::PrintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::PrintContext::PRINT() {
  return getToken(DaricParser::PRINT, 0);
}

tree::TerminalNode* DaricParser::PrintContext::SYS() {
  return getToken(DaricParser::SYS, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::PrintContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::PrintContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

tree::TerminalNode* DaricParser::PrintContext::SEMICOLON() {
  return getToken(DaricParser::SEMICOLON, 0);
}

tree::TerminalNode* DaricParser::PrintContext::WITH() {
  return getToken(DaricParser::WITH, 0);
}


size_t DaricParser::PrintContext::getRuleIndex() const {
  return DaricParser::RulePrint;
}


std::any DaricParser::PrintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitPrint(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::PrintContext* DaricParser::print() {
  PrintContext *_localctx = _tracker.createInstance<PrintContext>(_ctx, getState());
  enterRule(_localctx, 42, DaricParser::RulePrint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(326);
    match(DaricParser::PRINT);
    setState(328);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::SYS) {
      setState(327);
      match(DaricParser::SYS);
    }
    setState(340);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx)) {
    case 1: {
      setState(330);
      antlrcpp::downCast<PrintContext *>(_localctx)->value = expression(0);
      setState(335);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
      case 1: {
        setState(332);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == DaricParser::WITH) {
          setState(331);
          match(DaricParser::WITH);
        }
        setState(334);
        antlrcpp::downCast<PrintContext *>(_localctx)->format = expression(0);
        break;
      }

      default:
        break;
      }
      setState(338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == DaricParser::SEMICOLON) {
        setState(337);
        match(DaricParser::SEMICOLON);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProcedureContext ------------------------------------------------------------------

DaricParser::ProcedureContext::ProcedureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::ProcedureContext::DEF() {
  return getTokens(DaricParser::DEF);
}

tree::TerminalNode* DaricParser::ProcedureContext::DEF(size_t i) {
  return getToken(DaricParser::DEF, i);
}

tree::TerminalNode* DaricParser::ProcedureContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

DaricParser::StatementsContext* DaricParser::ProcedureContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::ProcedureContext::END() {
  return getToken(DaricParser::END, 0);
}

tree::TerminalNode* DaricParser::ProcedureContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::ProcedureContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::ProcedureContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

std::vector<tree::TerminalNode *> DaricParser::ProcedureContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::ProcedureContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}

std::vector<DaricParser::ParameterContext *> DaricParser::ProcedureContext::parameter() {
  return getRuleContexts<DaricParser::ParameterContext>();
}

DaricParser::ParameterContext* DaricParser::ProcedureContext::parameter(size_t i) {
  return getRuleContext<DaricParser::ParameterContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::ProcedureContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::ProcedureContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

tree::TerminalNode* DaricParser::ProcedureContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

std::vector<DaricParser::SeparatorContext *> DaricParser::ProcedureContext::separator() {
  return getRuleContexts<DaricParser::SeparatorContext>();
}

DaricParser::SeparatorContext* DaricParser::ProcedureContext::separator(size_t i) {
  return getRuleContext<DaricParser::SeparatorContext>(i);
}


size_t DaricParser::ProcedureContext::getRuleIndex() const {
  return DaricParser::RuleProcedure;
}


std::any DaricParser::ProcedureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitProcedure(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ProcedureContext* DaricParser::procedure() {
  ProcedureContext *_localctx = _tracker.createInstance<ProcedureContext>(_ctx, getState());
  enterRule(_localctx, 44, DaricParser::RuleProcedure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(342);
    match(DaricParser::DEF);
    setState(343);
    match(DaricParser::IDENTIFIER);
    setState(346);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      setState(344);
      match(DaricParser::COLON);
      setState(345);
      type();
      break;
    }

    default:
      break;
    }
    setState(349);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(348);
      match(DaricParser::LPAREN);
      break;
    }

    default:
      break;
    }
    setState(354);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(351);
        match(DaricParser::NEWLINE); 
      }
      setState(356);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx);
    }
    setState(358);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(357);
      parameter();
      break;
    }

    default:
      break;
    }
    setState(370);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(360);
      match(DaricParser::COMMA);
      setState(364);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == DaricParser::NEWLINE) {
        setState(361);
        match(DaricParser::NEWLINE);
        setState(366);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(367);
      parameter();
      setState(372);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(374);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::RPAREN) {
      setState(373);
      match(DaricParser::RPAREN);
    }
    setState(379);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(376);
        separator(); 
      }
      setState(381);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx);
    }
    setState(382);
    statements();
    setState(383);
    match(DaricParser::END);
    setState(384);
    match(DaricParser::DEF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RepeatContext ------------------------------------------------------------------

DaricParser::RepeatContext::RepeatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::RepeatContext::REPEAT() {
  return getToken(DaricParser::REPEAT, 0);
}

DaricParser::StatementsContext* DaricParser::RepeatContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::RepeatContext::UNTIL() {
  return getToken(DaricParser::UNTIL, 0);
}

DaricParser::ExpressionContext* DaricParser::RepeatContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}


size_t DaricParser::RepeatContext::getRuleIndex() const {
  return DaricParser::RuleRepeat;
}


std::any DaricParser::RepeatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitRepeat(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::RepeatContext* DaricParser::repeat() {
  RepeatContext *_localctx = _tracker.createInstance<RepeatContext>(_ctx, getState());
  enterRule(_localctx, 46, DaricParser::RuleRepeat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    match(DaricParser::REPEAT);
    setState(387);
    statements();
    setState(388);
    match(DaricParser::UNTIL);
    setState(389);
    expression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReadContext ------------------------------------------------------------------

DaricParser::ReadContext::ReadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ReadContext::READ() {
  return getToken(DaricParser::READ, 0);
}

DaricParser::TypeSignatureContext* DaricParser::ReadContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}


size_t DaricParser::ReadContext::getRuleIndex() const {
  return DaricParser::RuleRead;
}


std::any DaricParser::ReadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitRead(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ReadContext* DaricParser::read() {
  ReadContext *_localctx = _tracker.createInstance<ReadContext>(_ctx, getState());
  enterRule(_localctx, 48, DaricParser::RuleRead);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(391);
    match(DaricParser::READ);
    setState(392);
    typeSignature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RestoreContext ------------------------------------------------------------------

DaricParser::RestoreContext::RestoreContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::RestoreContext::RESTORE() {
  return getToken(DaricParser::RESTORE, 0);
}

DaricParser::StringLiteralContext* DaricParser::RestoreContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::RestoreContext::getRuleIndex() const {
  return DaricParser::RuleRestore;
}


std::any DaricParser::RestoreContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitRestore(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::RestoreContext* DaricParser::restore() {
  RestoreContext *_localctx = _tracker.createInstance<RestoreContext>(_ctx, getState());
  enterRule(_localctx, 50, DaricParser::RuleRestore);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(394);
    match(DaricParser::RESTORE);
    setState(395);
    stringLiteral();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReturnContext ------------------------------------------------------------------

DaricParser::ReturnContext::ReturnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ReturnContext::RETURN() {
  return getToken(DaricParser::RETURN, 0);
}

DaricParser::ExpressionContext* DaricParser::ReturnContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}


size_t DaricParser::ReturnContext::getRuleIndex() const {
  return DaricParser::RuleReturn;
}


std::any DaricParser::ReturnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitReturn(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ReturnContext* DaricParser::return_() {
  ReturnContext *_localctx = _tracker.createInstance<ReturnContext>(_ctx, getState());
  enterRule(_localctx, 52, DaricParser::RuleReturn);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(397);
    match(DaricParser::RETURN);
    setState(399);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(398);
      expression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructContext ------------------------------------------------------------------

DaricParser::StructContext::StructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::RECORD() {
  return getTokens(DaricParser::RECORD);
}

tree::TerminalNode* DaricParser::StructContext::RECORD(size_t i) {
  return getToken(DaricParser::RECORD, i);
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::StructContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::COLON() {
  return getTokens(DaricParser::COLON);
}

tree::TerminalNode* DaricParser::StructContext::COLON(size_t i) {
  return getToken(DaricParser::COLON, i);
}

std::vector<DaricParser::TypeOrStructContext *> DaricParser::StructContext::typeOrStruct() {
  return getRuleContexts<DaricParser::TypeOrStructContext>();
}

DaricParser::TypeOrStructContext* DaricParser::StructContext::typeOrStruct(size_t i) {
  return getRuleContext<DaricParser::TypeOrStructContext>(i);
}

tree::TerminalNode* DaricParser::StructContext::END() {
  return getToken(DaricParser::END, 0);
}

std::vector<tree::TerminalNode *> DaricParser::StructContext::NEWLINE() {
  return getTokens(DaricParser::NEWLINE);
}

tree::TerminalNode* DaricParser::StructContext::NEWLINE(size_t i) {
  return getToken(DaricParser::NEWLINE, i);
}


size_t DaricParser::StructContext::getRuleIndex() const {
  return DaricParser::RuleStruct;
}


std::any DaricParser::StructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStruct(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StructContext* DaricParser::struct_() {
  StructContext *_localctx = _tracker.createInstance<StructContext>(_ctx, getState());
  enterRule(_localctx, 54, DaricParser::RuleStruct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(401);
    match(DaricParser::RECORD);
    setState(402);
    match(DaricParser::IDENTIFIER);
    setState(406);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::NEWLINE) {
      setState(403);
      match(DaricParser::NEWLINE);
      setState(408);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(409);
    match(DaricParser::IDENTIFIER);
    setState(410);
    match(DaricParser::COLON);
    setState(411);
    typeOrStruct();
    setState(422);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(413); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(412);
          match(DaricParser::NEWLINE);
          setState(415); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == DaricParser::NEWLINE);
        setState(417);
        match(DaricParser::IDENTIFIER);
        setState(418);
        match(DaricParser::COLON);
        setState(419);
        typeOrStruct(); 
      }
      setState(424);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx);
    }
    setState(428);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::NEWLINE) {
      setState(425);
      match(DaricParser::NEWLINE);
      setState(430);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(431);
    match(DaricParser::END);
    setState(432);
    match(DaricParser::RECORD);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SwapContext ------------------------------------------------------------------

DaricParser::SwapContext::SwapContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::SwapContext::SWAP() {
  return getToken(DaricParser::SWAP, 0);
}

std::vector<DaricParser::TypeSignatureContext *> DaricParser::SwapContext::typeSignature() {
  return getRuleContexts<DaricParser::TypeSignatureContext>();
}

DaricParser::TypeSignatureContext* DaricParser::SwapContext::typeSignature(size_t i) {
  return getRuleContext<DaricParser::TypeSignatureContext>(i);
}

tree::TerminalNode* DaricParser::SwapContext::COMMA() {
  return getToken(DaricParser::COMMA, 0);
}


size_t DaricParser::SwapContext::getRuleIndex() const {
  return DaricParser::RuleSwap;
}


std::any DaricParser::SwapContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitSwap(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::SwapContext* DaricParser::swap() {
  SwapContext *_localctx = _tracker.createInstance<SwapContext>(_ctx, getState());
  enterRule(_localctx, 56, DaricParser::RuleSwap);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(434);
    match(DaricParser::SWAP);
    setState(435);
    typeSignature();
    setState(436);
    match(DaricParser::COMMA);
    setState(437);
    typeSignature();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenContext ------------------------------------------------------------------

DaricParser::WhenContext::WhenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::WhenContext::WHEN() {
  return getToken(DaricParser::WHEN, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::WhenContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::WhenContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

DaricParser::StatementsContext* DaricParser::WhenContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

std::vector<tree::TerminalNode *> DaricParser::WhenContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::WhenContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::WhenContext::getRuleIndex() const {
  return DaricParser::RuleWhen;
}


std::any DaricParser::WhenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitWhen(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::WhenContext* DaricParser::when() {
  WhenContext *_localctx = _tracker.createInstance<WhenContext>(_ctx, getState());
  enterRule(_localctx, 58, DaricParser::RuleWhen);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(439);
    match(DaricParser::WHEN);
    setState(440);
    expression(0);
    setState(445);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(441);
      match(DaricParser::COMMA);
      setState(442);
      expression(0);
      setState(447);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(448);
    statements();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

DaricParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::WhileContext::WHILE() {
  return getTokens(DaricParser::WHILE);
}

tree::TerminalNode* DaricParser::WhileContext::WHILE(size_t i) {
  return getToken(DaricParser::WHILE, i);
}

DaricParser::ExpressionContext* DaricParser::WhileContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

DaricParser::StatementsContext* DaricParser::WhileContext::statements() {
  return getRuleContext<DaricParser::StatementsContext>(0);
}

tree::TerminalNode* DaricParser::WhileContext::END() {
  return getToken(DaricParser::END, 0);
}


size_t DaricParser::WhileContext::getRuleIndex() const {
  return DaricParser::RuleWhile;
}


std::any DaricParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::WhileContext* DaricParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 60, DaricParser::RuleWhile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    match(DaricParser::WHILE);
    setState(451);
    expression(0);
    setState(452);
    statements();
    setState(453);
    match(DaricParser::END);
    setState(454);
    match(DaricParser::WHILE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClearContext ------------------------------------------------------------------

DaricParser::ClearContext::ClearContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ClearContext::CLEAR() {
  return getToken(DaricParser::CLEAR, 0);
}

tree::TerminalNode* DaricParser::ClearContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}


size_t DaricParser::ClearContext::getRuleIndex() const {
  return DaricParser::RuleClear;
}


std::any DaricParser::ClearContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitClear(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::ClearContext* DaricParser::clear() {
  ClearContext *_localctx = _tracker.createInstance<ClearContext>(_ctx, getState());
  enterRule(_localctx, 62, DaricParser::RuleClear);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    match(DaricParser::CLEAR);
    setState(457);
    match(DaricParser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GetContext ------------------------------------------------------------------

DaricParser::GetContext::GetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::GetContext::ASSIGNL() {
  return getToken(DaricParser::ASSIGNL, 0);
}

DaricParser::TypeSignatureContext* DaricParser::GetContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::GetContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}


size_t DaricParser::GetContext::getRuleIndex() const {
  return DaricParser::RuleGet;
}


std::any DaricParser::GetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitGet(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::GetContext* DaricParser::get() {
  GetContext *_localctx = _tracker.createInstance<GetContext>(_ctx, getState());
  enterRule(_localctx, 64, DaricParser::RuleGet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(459);
    antlrcpp::downCast<GetContext *>(_localctx)->in = typeSignature();
    setState(460);
    match(DaricParser::ASSIGNL);
    setState(461);
    antlrcpp::downCast<GetContext *>(_localctx)->coll = match(DaricParser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetContext ------------------------------------------------------------------

DaricParser::SetContext::SetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::SetContext::ASSIGNR() {
  return getToken(DaricParser::ASSIGNR, 0);
}

tree::TerminalNode* DaricParser::SetContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

DaricParser::ExpressionContext* DaricParser::SetContext::expression() {
  return getRuleContext<DaricParser::ExpressionContext>(0);
}

DaricParser::TypeSignatureContext* DaricParser::SetContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}


size_t DaricParser::SetContext::getRuleIndex() const {
  return DaricParser::RuleSet;
}


std::any DaricParser::SetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitSet(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::SetContext* DaricParser::set() {
  SetContext *_localctx = _tracker.createInstance<SetContext>(_ctx, getState());
  enterRule(_localctx, 66, DaricParser::RuleSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(465);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx)) {
    case 1: {
      setState(463);
      antlrcpp::downCast<SetContext *>(_localctx)->in = typeSignature();
      break;
    }

    case 2: {
      setState(464);
      expression(0);
      break;
    }

    default:
      break;
    }
    setState(467);
    match(DaricParser::ASSIGNR);
    setState(468);
    antlrcpp::downCast<SetContext *>(_localctx)->coll = match(DaricParser::IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureSingleContext ------------------------------------------------------------------

DaricParser::TypeSignatureSingleContext::TypeSignatureSingleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureSingleContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSingleContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureSingleContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}


size_t DaricParser::TypeSignatureSingleContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureSingle;
}


std::any DaricParser::TypeSignatureSingleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureSingle(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureSingleContext* DaricParser::typeSignatureSingle() {
  TypeSignatureSingleContext *_localctx = _tracker.createInstance<TypeSignatureSingleContext>(_ctx, getState());
  enterRule(_localctx, 68, DaricParser::RuleTypeSignatureSingle);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    match(DaricParser::IDENTIFIER);
    setState(473);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
    case 1: {
      setState(471);
      match(DaricParser::COLON);
      setState(472);
      type();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureArrayContext ------------------------------------------------------------------

DaricParser::TypeSignatureArrayContext::TypeSignatureArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureArrayContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureArrayContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureArrayContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureArrayContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureArrayContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureArray;
}


std::any DaricParser::TypeSignatureArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureArray(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureArrayContext* DaricParser::typeSignatureArray() {
  TypeSignatureArrayContext *_localctx = _tracker.createInstance<TypeSignatureArrayContext>(_ctx, getState());
  enterRule(_localctx, 70, DaricParser::RuleTypeSignatureArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(475);
    match(DaricParser::IDENTIFIER);
    setState(478);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::COLON) {
      setState(476);
      match(DaricParser::COLON);
      setState(477);
      type();
    }
    setState(480);
    match(DaricParser::SOPEN);
    setState(482);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(481);
      expression(0);
    }
    setState(488);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(484);
      match(DaricParser::COMMA);
      setState(485);
      expression(0);
      setState(490);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(491);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordContext::TypeSignatureRecordContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordContext::DOT() {
  return getTokens(DaricParser::DOT);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordContext::DOT(size_t i) {
  return getToken(DaricParser::DOT, i);
}


size_t DaricParser::TypeSignatureRecordContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecord;
}


std::any DaricParser::TypeSignatureRecordContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecord(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordContext* DaricParser::typeSignatureRecord() {
  TypeSignatureRecordContext *_localctx = _tracker.createInstance<TypeSignatureRecordContext>(_ctx, getState());
  enterRule(_localctx, 72, DaricParser::RuleTypeSignatureRecord);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(493);
    match(DaricParser::IDENTIFIER);
    setState(496); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(494);
              match(DaricParser::DOT);
              setState(495);
              match(DaricParser::IDENTIFIER);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(498); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordArrayContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordArrayContext::TypeSignatureRecordArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureRecordArrayContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureRecordArrayContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayContext::DOT() {
  return getTokens(DaricParser::DOT);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayContext::DOT(size_t i) {
  return getToken(DaricParser::DOT, i);
}


size_t DaricParser::TypeSignatureRecordArrayContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecordArray;
}


std::any DaricParser::TypeSignatureRecordArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecordArray(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordArrayContext* DaricParser::typeSignatureRecordArray() {
  TypeSignatureRecordArrayContext *_localctx = _tracker.createInstance<TypeSignatureRecordArrayContext>(_ctx, getState());
  enterRule(_localctx, 74, DaricParser::RuleTypeSignatureRecordArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(500);
    match(DaricParser::IDENTIFIER);
    setState(501);
    match(DaricParser::SOPEN);
    setState(503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(502);
      expression(0);
    }
    setState(509);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(505);
      match(DaricParser::COMMA);
      setState(506);
      expression(0);
      setState(511);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(512);
    match(DaricParser::SCLOSE);
    setState(515); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(513);
              match(DaricParser::DOT);
              setState(514);
              match(DaricParser::IDENTIFIER);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(517); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureArrayNewContext ------------------------------------------------------------------

DaricParser::TypeSignatureArrayNewContext::TypeSignatureArrayNewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureArrayNewContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureArrayNewContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureArrayNewContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureArrayNewContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureArrayNewContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureArrayNewContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureArrayNew;
}


std::any DaricParser::TypeSignatureArrayNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureArrayNew(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureArrayNewContext* DaricParser::typeSignatureArrayNew() {
  TypeSignatureArrayNewContext *_localctx = _tracker.createInstance<TypeSignatureArrayNewContext>(_ctx, getState());
  enterRule(_localctx, 76, DaricParser::RuleTypeSignatureArrayNew);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(519);
    match(DaricParser::IDENTIFIER);
    setState(520);
    match(DaricParser::COLON);
    setState(521);
    type();
    setState(522);
    match(DaricParser::SOPEN);
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(523);
      expression(0);
    }
    setState(530);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(526);
      match(DaricParser::COMMA);
      setState(527);
      expression(0);
      setState(532);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(533);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordNewContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordNewContext::TypeSignatureRecordNewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordNewContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordNewContext::EQ() {
  return getTokens(DaricParser::EQ);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::EQ(size_t i) {
  return getToken(DaricParser::EQ, i);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureRecordNewContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureRecordNewContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordNewContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordNewContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureRecordNewContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecordNew;
}


std::any DaricParser::TypeSignatureRecordNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecordNew(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordNewContext* DaricParser::typeSignatureRecordNew() {
  TypeSignatureRecordNewContext *_localctx = _tracker.createInstance<TypeSignatureRecordNewContext>(_ctx, getState());
  enterRule(_localctx, 78, DaricParser::RuleTypeSignatureRecordNew);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(535);
    match(DaricParser::IDENTIFIER);
    setState(536);
    match(DaricParser::COLON);
    setState(537);
    match(DaricParser::IDENTIFIER);
    setState(538);
    match(DaricParser::LPAREN);
    setState(542);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::IDENTIFIER) {
      setState(539);
      match(DaricParser::IDENTIFIER);
      setState(540);
      match(DaricParser::EQ);
      setState(541);
      expression(0);
    }
    setState(550);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(544);
      match(DaricParser::COMMA);
      setState(545);
      match(DaricParser::IDENTIFIER);
      setState(546);
      match(DaricParser::EQ);
      setState(547);
      expression(0);
      setState(552);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(553);
    match(DaricParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureRecordArrayNewContext ------------------------------------------------------------------

DaricParser::TypeSignatureRecordArrayNewContext::TypeSignatureRecordArrayNewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayNewContext::IDENTIFIER() {
  return getTokens(DaricParser::IDENTIFIER);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::IDENTIFIER(size_t i) {
  return getToken(DaricParser::IDENTIFIER, i);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::TypeSignatureRecordArrayNewContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::TypeSignatureRecordArrayNewContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> DaricParser::TypeSignatureRecordArrayNewContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::TypeSignatureRecordArrayNewContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}


size_t DaricParser::TypeSignatureRecordArrayNewContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureRecordArrayNew;
}


std::any DaricParser::TypeSignatureRecordArrayNewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureRecordArrayNew(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureRecordArrayNewContext* DaricParser::typeSignatureRecordArrayNew() {
  TypeSignatureRecordArrayNewContext *_localctx = _tracker.createInstance<TypeSignatureRecordArrayNewContext>(_ctx, getState());
  enterRule(_localctx, 80, DaricParser::RuleTypeSignatureRecordArrayNew);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(555);
    match(DaricParser::IDENTIFIER);
    setState(556);
    match(DaricParser::COLON);
    setState(557);
    match(DaricParser::IDENTIFIER);
    setState(558);
    match(DaricParser::SOPEN);
    setState(560);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17557826306048) != 0 || (((_la - 70) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 70)) & 35518829790502399) != 0) {
      setState(559);
      expression(0);
    }
    setState(566);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == DaricParser::COMMA) {
      setState(562);
      match(DaricParser::COMMA);
      setState(563);
      expression(0);
      setState(568);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(569);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureListContext ------------------------------------------------------------------

DaricParser::TypeSignatureListContext::TypeSignatureListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::LIST() {
  return getToken(DaricParser::LIST, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureListContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureListContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureListContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureList;
}


std::any DaricParser::TypeSignatureListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureList(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureListContext* DaricParser::typeSignatureList() {
  TypeSignatureListContext *_localctx = _tracker.createInstance<TypeSignatureListContext>(_ctx, getState());
  enterRule(_localctx, 82, DaricParser::RuleTypeSignatureList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(571);
    match(DaricParser::IDENTIFIER);
    setState(572);
    match(DaricParser::COLON);
    setState(573);
    match(DaricParser::LIST);
    setState(574);
    match(DaricParser::SOPEN);
    setState(575);
    typeOrStruct();
    setState(576);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureVectorContext ------------------------------------------------------------------

DaricParser::TypeSignatureVectorContext::TypeSignatureVectorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::VECTOR() {
  return getToken(DaricParser::VECTOR, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureVectorContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureVectorContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureVectorContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureVector;
}


std::any DaricParser::TypeSignatureVectorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureVector(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureVectorContext* DaricParser::typeSignatureVector() {
  TypeSignatureVectorContext *_localctx = _tracker.createInstance<TypeSignatureVectorContext>(_ctx, getState());
  enterRule(_localctx, 84, DaricParser::RuleTypeSignatureVector);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    match(DaricParser::IDENTIFIER);
    setState(579);
    match(DaricParser::COLON);
    setState(580);
    match(DaricParser::VECTOR);
    setState(581);
    match(DaricParser::SOPEN);
    setState(582);
    typeOrStruct();
    setState(583);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureSetContext ------------------------------------------------------------------

DaricParser::TypeSignatureSetContext::TypeSignatureSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::SET() {
  return getToken(DaricParser::SET, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureSetContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureSetContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureSetContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureSet;
}


std::any DaricParser::TypeSignatureSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureSet(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureSetContext* DaricParser::typeSignatureSet() {
  TypeSignatureSetContext *_localctx = _tracker.createInstance<TypeSignatureSetContext>(_ctx, getState());
  enterRule(_localctx, 86, DaricParser::RuleTypeSignatureSet);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(585);
    match(DaricParser::IDENTIFIER);
    setState(586);
    match(DaricParser::COLON);
    setState(587);
    match(DaricParser::SET);
    setState(588);
    match(DaricParser::SOPEN);
    setState(589);
    type();
    setState(590);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureMapContext ------------------------------------------------------------------

DaricParser::TypeSignatureMapContext::TypeSignatureMapContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::MAP() {
  return getToken(DaricParser::MAP, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeContext* DaricParser::TypeSignatureMapContext::type() {
  return getRuleContext<DaricParser::TypeContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::COMMA() {
  return getToken(DaricParser::COMMA, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureMapContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureMapContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureMapContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureMap;
}


std::any DaricParser::TypeSignatureMapContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureMap(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureMapContext* DaricParser::typeSignatureMap() {
  TypeSignatureMapContext *_localctx = _tracker.createInstance<TypeSignatureMapContext>(_ctx, getState());
  enterRule(_localctx, 88, DaricParser::RuleTypeSignatureMap);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(DaricParser::IDENTIFIER);
    setState(593);
    match(DaricParser::COLON);
    setState(594);
    match(DaricParser::MAP);
    setState(595);
    match(DaricParser::SOPEN);
    setState(596);
    type();
    setState(597);
    match(DaricParser::COMMA);
    setState(598);
    typeOrStruct();
    setState(599);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureStackContext ------------------------------------------------------------------

DaricParser::TypeSignatureStackContext::TypeSignatureStackContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::STACK() {
  return getToken(DaricParser::STACK, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureStackContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureStackContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureStackContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureStack;
}


std::any DaricParser::TypeSignatureStackContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureStack(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureStackContext* DaricParser::typeSignatureStack() {
  TypeSignatureStackContext *_localctx = _tracker.createInstance<TypeSignatureStackContext>(_ctx, getState());
  enterRule(_localctx, 90, DaricParser::RuleTypeSignatureStack);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(601);
    match(DaricParser::IDENTIFIER);
    setState(602);
    match(DaricParser::COLON);
    setState(603);
    match(DaricParser::STACK);
    setState(604);
    match(DaricParser::SOPEN);
    setState(605);
    typeOrStruct();
    setState(606);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureQueueContext ------------------------------------------------------------------

DaricParser::TypeSignatureQueueContext::TypeSignatureQueueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::COLON() {
  return getToken(DaricParser::COLON, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::QUEUE() {
  return getToken(DaricParser::QUEUE, 0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::SOPEN() {
  return getToken(DaricParser::SOPEN, 0);
}

DaricParser::TypeOrStructContext* DaricParser::TypeSignatureQueueContext::typeOrStruct() {
  return getRuleContext<DaricParser::TypeOrStructContext>(0);
}

tree::TerminalNode* DaricParser::TypeSignatureQueueContext::SCLOSE() {
  return getToken(DaricParser::SCLOSE, 0);
}


size_t DaricParser::TypeSignatureQueueContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureQueue;
}


std::any DaricParser::TypeSignatureQueueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureQueue(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureQueueContext* DaricParser::typeSignatureQueue() {
  TypeSignatureQueueContext *_localctx = _tracker.createInstance<TypeSignatureQueueContext>(_ctx, getState());
  enterRule(_localctx, 92, DaricParser::RuleTypeSignatureQueue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    match(DaricParser::IDENTIFIER);
    setState(609);
    match(DaricParser::COLON);
    setState(610);
    match(DaricParser::QUEUE);
    setState(611);
    match(DaricParser::SOPEN);
    setState(612);
    typeOrStruct();
    setState(613);
    match(DaricParser::SCLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureContext ------------------------------------------------------------------

DaricParser::TypeSignatureContext::TypeSignatureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::TypeSignatureSingleContext* DaricParser::TypeSignatureContext::typeSignatureSingle() {
  return getRuleContext<DaricParser::TypeSignatureSingleContext>(0);
}

DaricParser::TypeSignatureArrayContext* DaricParser::TypeSignatureContext::typeSignatureArray() {
  return getRuleContext<DaricParser::TypeSignatureArrayContext>(0);
}

DaricParser::TypeSignatureRecordContext* DaricParser::TypeSignatureContext::typeSignatureRecord() {
  return getRuleContext<DaricParser::TypeSignatureRecordContext>(0);
}

DaricParser::TypeSignatureRecordArrayContext* DaricParser::TypeSignatureContext::typeSignatureRecordArray() {
  return getRuleContext<DaricParser::TypeSignatureRecordArrayContext>(0);
}


size_t DaricParser::TypeSignatureContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignature;
}


std::any DaricParser::TypeSignatureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignature(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureContext* DaricParser::typeSignature() {
  TypeSignatureContext *_localctx = _tracker.createInstance<TypeSignatureContext>(_ctx, getState());
  enterRule(_localctx, 94, DaricParser::RuleTypeSignature);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(619);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(615);
      typeSignatureSingle();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(616);
      typeSignatureArray();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(617);
      typeSignatureRecord();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(618);
      typeSignatureRecordArray();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSignatureArrayOrCollectionContext ------------------------------------------------------------------

DaricParser::TypeSignatureArrayOrCollectionContext::TypeSignatureArrayOrCollectionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::TypeSignatureArrayNewContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureArrayNew() {
  return getRuleContext<DaricParser::TypeSignatureArrayNewContext>(0);
}

DaricParser::TypeSignatureRecordNewContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureRecordNew() {
  return getRuleContext<DaricParser::TypeSignatureRecordNewContext>(0);
}

DaricParser::TypeSignatureRecordArrayNewContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureRecordArrayNew() {
  return getRuleContext<DaricParser::TypeSignatureRecordArrayNewContext>(0);
}

DaricParser::TypeSignatureListContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureList() {
  return getRuleContext<DaricParser::TypeSignatureListContext>(0);
}

DaricParser::TypeSignatureVectorContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureVector() {
  return getRuleContext<DaricParser::TypeSignatureVectorContext>(0);
}

DaricParser::TypeSignatureSetContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureSet() {
  return getRuleContext<DaricParser::TypeSignatureSetContext>(0);
}

DaricParser::TypeSignatureMapContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureMap() {
  return getRuleContext<DaricParser::TypeSignatureMapContext>(0);
}

DaricParser::TypeSignatureStackContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureStack() {
  return getRuleContext<DaricParser::TypeSignatureStackContext>(0);
}

DaricParser::TypeSignatureQueueContext* DaricParser::TypeSignatureArrayOrCollectionContext::typeSignatureQueue() {
  return getRuleContext<DaricParser::TypeSignatureQueueContext>(0);
}


size_t DaricParser::TypeSignatureArrayOrCollectionContext::getRuleIndex() const {
  return DaricParser::RuleTypeSignatureArrayOrCollection;
}


std::any DaricParser::TypeSignatureArrayOrCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeSignatureArrayOrCollection(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeSignatureArrayOrCollectionContext* DaricParser::typeSignatureArrayOrCollection() {
  TypeSignatureArrayOrCollectionContext *_localctx = _tracker.createInstance<TypeSignatureArrayOrCollectionContext>(_ctx, getState());
  enterRule(_localctx, 96, DaricParser::RuleTypeSignatureArrayOrCollection);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(630);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(621);
      typeSignatureArrayNew();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(622);
      typeSignatureRecordNew();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(623);
      typeSignatureRecordArrayNew();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(624);
      typeSignatureList();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(625);
      typeSignatureVector();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(626);
      typeSignatureSet();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(627);
      typeSignatureMap();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(628);
      typeSignatureStack();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(629);
      typeSignatureQueue();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

DaricParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::ExpressionContext::LPAREN() {
  return getToken(DaricParser::LPAREN, 0);
}

std::vector<DaricParser::ExpressionContext *> DaricParser::ExpressionContext::expression() {
  return getRuleContexts<DaricParser::ExpressionContext>();
}

DaricParser::ExpressionContext* DaricParser::ExpressionContext::expression(size_t i) {
  return getRuleContext<DaricParser::ExpressionContext>(i);
}

tree::TerminalNode* DaricParser::ExpressionContext::RPAREN() {
  return getToken(DaricParser::RPAREN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MAIN() {
  return getToken(DaricParser::MAIN, 0);
}

DaricParser::LiteralContext* DaricParser::ExpressionContext::literal() {
  return getRuleContext<DaricParser::LiteralContext>(0);
}

DaricParser::ExprcallContext* DaricParser::ExpressionContext::exprcall() {
  return getRuleContext<DaricParser::ExprcallContext>(0);
}

DaricParser::TypeSignatureContext* DaricParser::ExpressionContext::typeSignature() {
  return getRuleContext<DaricParser::TypeSignatureContext>(0);
}

tree::TerminalNode* DaricParser::ExpressionContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::HAS() {
  return getToken(DaricParser::HAS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MINUS() {
  return getToken(DaricParser::MINUS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::PLUS() {
  return getToken(DaricParser::PLUS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::INT() {
  return getToken(DaricParser::INT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::FLOAT() {
  return getToken(DaricParser::FLOAT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::STRING() {
  return getToken(DaricParser::STRING, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::WITH() {
  return getToken(DaricParser::WITH, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ABS() {
  return getToken(DaricParser::ABS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::COMP() {
  return getToken(DaricParser::COMP, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::NOT() {
  return getToken(DaricParser::NOT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::TRUE() {
  return getToken(DaricParser::TRUE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::FALSE() {
  return getToken(DaricParser::FALSE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::PI() {
  return getToken(DaricParser::PI, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::DEG() {
  return getToken(DaricParser::DEG, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::RAD() {
  return getToken(DaricParser::RAD, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SGN() {
  return getToken(DaricParser::SGN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ACS() {
  return getToken(DaricParser::ACS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ASN() {
  return getToken(DaricParser::ASN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ATN() {
  return getToken(DaricParser::ATN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::COS() {
  return getToken(DaricParser::COS, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::EXP() {
  return getToken(DaricParser::EXP, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::FLOOR() {
  return getToken(DaricParser::FLOOR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ROUND() {
  return getToken(DaricParser::ROUND, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LN() {
  return getToken(DaricParser::LN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LOG() {
  return getToken(DaricParser::LOG, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SIN() {
  return getToken(DaricParser::SIN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SQR() {
  return getToken(DaricParser::SQR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::TAN() {
  return getToken(DaricParser::TAN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MIN() {
  return getToken(DaricParser::MIN, 0);
}

std::vector<tree::TerminalNode *> DaricParser::ExpressionContext::COMMA() {
  return getTokens(DaricParser::COMMA);
}

tree::TerminalNode* DaricParser::ExpressionContext::COMMA(size_t i) {
  return getToken(DaricParser::COMMA, i);
}

tree::TerminalNode* DaricParser::ExpressionContext::MAX() {
  return getToken(DaricParser::MAX, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::ASC() {
  return getToken(DaricParser::ASC, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::CHR() {
  return getToken(DaricParser::CHR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::INSTR() {
  return getToken(DaricParser::INSTR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LEFT() {
  return getToken(DaricParser::LEFT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MID() {
  return getToken(DaricParser::MID, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::RIGHT() {
  return getToken(DaricParser::RIGHT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LEN() {
  return getToken(DaricParser::LEN, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SIZE() {
  return getToken(DaricParser::SIZE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::HAT() {
  return getToken(DaricParser::HAT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::DIVIDE() {
  return getToken(DaricParser::DIVIDE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MULTIPLY() {
  return getToken(DaricParser::MULTIPLY, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::DIV() {
  return getToken(DaricParser::DIV, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::MOD() {
  return getToken(DaricParser::MOD, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SHL() {
  return getToken(DaricParser::SHL, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::SHR() {
  return getToken(DaricParser::SHR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::EQ() {
  return getToken(DaricParser::EQ, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::NE() {
  return getToken(DaricParser::NE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::GT() {
  return getToken(DaricParser::GT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::GE() {
  return getToken(DaricParser::GE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LT() {
  return getToken(DaricParser::LT, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::LE() {
  return getToken(DaricParser::LE, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::AND() {
  return getToken(DaricParser::AND, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::OR() {
  return getToken(DaricParser::OR, 0);
}

tree::TerminalNode* DaricParser::ExpressionContext::EOR() {
  return getToken(DaricParser::EOR, 0);
}


size_t DaricParser::ExpressionContext::getRuleIndex() const {
  return DaricParser::RuleExpression;
}


std::any DaricParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}


DaricParser::ExpressionContext* DaricParser::expression() {
   return expression(0);
}

DaricParser::ExpressionContext* DaricParser::expression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  DaricParser::ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, parentState);
  DaricParser::ExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 98;
  enterRecursionRule(_localctx, 98, DaricParser::RuleExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(781);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
    case 1: {
      setState(633);
      match(DaricParser::LPAREN);
      setState(634);
      expression(0);
      setState(635);
      match(DaricParser::RPAREN);
      break;
    }

    case 2: {
      setState(637);
      match(DaricParser::MAIN);
      break;
    }

    case 3: {
      setState(638);
      literal();
      break;
    }

    case 4: {
      setState(639);
      exprcall();
      break;
    }

    case 5: {
      setState(640);
      typeSignature();
      break;
    }

    case 6: {
      setState(641);
      match(DaricParser::IDENTIFIER);
      setState(642);
      match(DaricParser::HAS);
      setState(643);
      expression(55);
      break;
    }

    case 7: {
      setState(644);
      match(DaricParser::MINUS);
      setState(645);
      expression(54);
      break;
    }

    case 8: {
      setState(646);
      match(DaricParser::PLUS);
      setState(647);
      expression(53);
      break;
    }

    case 9: {
      setState(648);
      match(DaricParser::INT);
      setState(649);
      expression(52);
      break;
    }

    case 10: {
      setState(650);
      match(DaricParser::FLOAT);
      setState(651);
      expression(51);
      break;
    }

    case 11: {
      setState(652);
      match(DaricParser::STRING);
      setState(654);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
      case 1: {
        setState(653);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(656);
      expression(0);
      setState(659);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx)) {
      case 1: {
        setState(657);
        match(DaricParser::WITH);
        setState(658);
        expression(0);
        break;
      }

      default:
        break;
      }
      setState(662);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
      case 1: {
        setState(661);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 12: {
      setState(664);
      match(DaricParser::ABS);
      setState(665);
      expression(49);
      break;
    }

    case 13: {
      setState(666);
      match(DaricParser::COMP);
      setState(667);
      expression(48);
      break;
    }

    case 14: {
      setState(668);
      match(DaricParser::NOT);
      setState(669);
      expression(47);
      break;
    }

    case 15: {
      setState(670);
      match(DaricParser::TRUE);
      break;
    }

    case 16: {
      setState(671);
      match(DaricParser::FALSE);
      break;
    }

    case 17: {
      setState(672);
      match(DaricParser::PI);
      break;
    }

    case 18: {
      setState(673);
      match(DaricParser::DEG);
      setState(674);
      expression(43);
      break;
    }

    case 19: {
      setState(675);
      match(DaricParser::RAD);
      setState(676);
      expression(42);
      break;
    }

    case 20: {
      setState(677);
      match(DaricParser::SGN);
      setState(678);
      expression(41);
      break;
    }

    case 21: {
      setState(679);
      match(DaricParser::ACS);
      setState(680);
      expression(40);
      break;
    }

    case 22: {
      setState(681);
      match(DaricParser::ASN);
      setState(682);
      expression(39);
      break;
    }

    case 23: {
      setState(683);
      match(DaricParser::ATN);
      setState(684);
      expression(38);
      break;
    }

    case 24: {
      setState(685);
      match(DaricParser::COS);
      setState(686);
      expression(37);
      break;
    }

    case 25: {
      setState(687);
      match(DaricParser::EXP);
      setState(688);
      expression(36);
      break;
    }

    case 26: {
      setState(689);
      match(DaricParser::FLOOR);
      setState(690);
      expression(35);
      break;
    }

    case 27: {
      setState(691);
      match(DaricParser::ROUND);
      setState(692);
      expression(34);
      break;
    }

    case 28: {
      setState(693);
      match(DaricParser::LN);
      setState(694);
      expression(33);
      break;
    }

    case 29: {
      setState(695);
      match(DaricParser::LOG);
      setState(696);
      expression(32);
      break;
    }

    case 30: {
      setState(697);
      match(DaricParser::SIN);
      setState(698);
      expression(31);
      break;
    }

    case 31: {
      setState(699);
      match(DaricParser::SQR);
      setState(700);
      expression(30);
      break;
    }

    case 32: {
      setState(701);
      match(DaricParser::TAN);
      setState(702);
      expression(29);
      break;
    }

    case 33: {
      setState(703);
      match(DaricParser::MIN);
      setState(705);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
      case 1: {
        setState(704);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(707);
      expression(0);
      setState(708);
      match(DaricParser::COMMA);
      setState(709);
      expression(0);
      setState(711);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
      case 1: {
        setState(710);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 34: {
      setState(713);
      match(DaricParser::MAX);
      setState(715);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
      case 1: {
        setState(714);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(717);
      expression(0);
      setState(718);
      match(DaricParser::COMMA);
      setState(719);
      expression(0);
      setState(721);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
      case 1: {
        setState(720);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 35: {
      setState(723);
      match(DaricParser::ASC);
      setState(724);
      expression(26);
      break;
    }

    case 36: {
      setState(725);
      match(DaricParser::CHR);
      setState(726);
      expression(25);
      break;
    }

    case 37: {
      setState(727);
      match(DaricParser::INSTR);
      setState(729);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
      case 1: {
        setState(728);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(731);
      expression(0);
      setState(732);
      match(DaricParser::COMMA);
      setState(733);
      expression(0);
      setState(734);
      match(DaricParser::COMMA);
      setState(735);
      expression(0);
      setState(737);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
      case 1: {
        setState(736);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 38: {
      setState(739);
      match(DaricParser::LEFT);
      setState(741);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
      case 1: {
        setState(740);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(743);
      expression(0);
      setState(744);
      match(DaricParser::COMMA);
      setState(745);
      expression(0);
      setState(747);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
      case 1: {
        setState(746);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 39: {
      setState(749);
      match(DaricParser::MID);
      setState(751);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
      case 1: {
        setState(750);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(753);
      expression(0);
      setState(754);
      match(DaricParser::COMMA);
      setState(755);
      expression(0);
      setState(756);
      match(DaricParser::COMMA);
      setState(757);
      expression(0);
      setState(759);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
      case 1: {
        setState(758);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 40: {
      setState(761);
      match(DaricParser::RIGHT);
      setState(763);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(762);
        match(DaricParser::LPAREN);
        break;
      }

      default:
        break;
      }
      setState(765);
      expression(0);
      setState(766);
      match(DaricParser::COMMA);
      setState(767);
      expression(0);
      setState(769);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
      case 1: {
        setState(768);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 41: {
      setState(771);
      match(DaricParser::LEN);
      setState(772);
      expression(20);
      break;
    }

    case 42: {
      setState(773);
      match(DaricParser::SIZE);
      setState(775);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == DaricParser::LPAREN) {
        setState(774);
        match(DaricParser::LPAREN);
      }
      setState(777);
      match(DaricParser::IDENTIFIER);
      setState(779);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
      case 1: {
        setState(778);
        match(DaricParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(839);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(837);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(783);

          if (!(precpred(_ctx, 18))) throw FailedPredicateException(this, "precpred(_ctx, 18)");
          setState(784);
          match(DaricParser::HAT);
          setState(785);
          expression(18);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(786);

          if (!(precpred(_ctx, 17))) throw FailedPredicateException(this, "precpred(_ctx, 17)");
          setState(787);
          match(DaricParser::DIVIDE);
          setState(788);
          expression(18);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(789);

          if (!(precpred(_ctx, 16))) throw FailedPredicateException(this, "precpred(_ctx, 16)");
          setState(790);
          match(DaricParser::MULTIPLY);
          setState(791);
          expression(17);
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(792);

          if (!(precpred(_ctx, 15))) throw FailedPredicateException(this, "precpred(_ctx, 15)");
          setState(793);
          match(DaricParser::DIV);
          setState(794);
          expression(16);
          break;
        }

        case 5: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(795);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(796);
          match(DaricParser::MOD);
          setState(797);
          expression(15);
          break;
        }

        case 6: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(798);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(799);
          match(DaricParser::PLUS);
          setState(800);
          expression(14);
          break;
        }

        case 7: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(801);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(802);
          match(DaricParser::MINUS);
          setState(803);
          expression(13);
          break;
        }

        case 8: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(804);

          if (!(precpred(_ctx, 11))) throw FailedPredicateException(this, "precpred(_ctx, 11)");
          setState(805);
          match(DaricParser::SHL);
          setState(806);
          expression(12);
          break;
        }

        case 9: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(807);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(808);
          match(DaricParser::SHR);
          setState(809);
          expression(11);
          break;
        }

        case 10: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(810);

          if (!(precpred(_ctx, 9))) throw FailedPredicateException(this, "precpred(_ctx, 9)");
          setState(811);
          match(DaricParser::EQ);
          setState(812);
          expression(10);
          break;
        }

        case 11: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(813);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(814);
          match(DaricParser::NE);
          setState(815);
          expression(9);
          break;
        }

        case 12: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(816);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(817);
          match(DaricParser::GT);
          setState(818);
          expression(8);
          break;
        }

        case 13: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(819);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(820);
          match(DaricParser::GE);
          setState(821);
          expression(7);
          break;
        }

        case 14: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(822);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(823);
          match(DaricParser::LT);
          setState(824);
          expression(6);
          break;
        }

        case 15: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(825);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(826);
          match(DaricParser::LE);
          setState(827);
          expression(5);
          break;
        }

        case 16: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(828);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(829);
          match(DaricParser::AND);
          setState(830);
          expression(4);
          break;
        }

        case 17: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(831);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(832);
          match(DaricParser::OR);
          setState(833);
          expression(3);
          break;
        }

        case 18: {
          _localctx = _tracker.createInstance<ExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RuleExpression);
          setState(834);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(835);
          match(DaricParser::EOR);
          setState(836);
          expression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(841);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

DaricParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeContext::BYTE() {
  return getToken(DaricParser::BYTE, 0);
}

tree::TerminalNode* DaricParser::TypeContext::FLOAT() {
  return getToken(DaricParser::FLOAT, 0);
}

tree::TerminalNode* DaricParser::TypeContext::INT() {
  return getToken(DaricParser::INT, 0);
}

tree::TerminalNode* DaricParser::TypeContext::STRING() {
  return getToken(DaricParser::STRING, 0);
}


size_t DaricParser::TypeContext::getRuleIndex() const {
  return DaricParser::RuleType;
}


std::any DaricParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeContext* DaricParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 100, DaricParser::RuleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(842);
    _la = _input->LA(1);
    if (!((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 15) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeOrStructContext ------------------------------------------------------------------

DaricParser::TypeOrStructContext::TypeOrStructContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::TypeOrStructContext::BYTE() {
  return getToken(DaricParser::BYTE, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::FLOAT() {
  return getToken(DaricParser::FLOAT, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::INT() {
  return getToken(DaricParser::INT, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::STRING() {
  return getToken(DaricParser::STRING, 0);
}

tree::TerminalNode* DaricParser::TypeOrStructContext::IDENTIFIER() {
  return getToken(DaricParser::IDENTIFIER, 0);
}


size_t DaricParser::TypeOrStructContext::getRuleIndex() const {
  return DaricParser::RuleTypeOrStruct;
}


std::any DaricParser::TypeOrStructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitTypeOrStruct(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::TypeOrStructContext* DaricParser::typeOrStruct() {
  TypeOrStructContext *_localctx = _tracker.createInstance<TypeOrStructContext>(_ctx, getState());
  enterRule(_localctx, 102, DaricParser::RuleTypeOrStruct);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    _la = _input->LA(1);
    if (!((((_la - 79) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 79)) & 35184372088847) != 0)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

DaricParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

DaricParser::FloatLiteralContext* DaricParser::LiteralContext::floatLiteral() {
  return getRuleContext<DaricParser::FloatLiteralContext>(0);
}

DaricParser::IntegerLiteralContext* DaricParser::LiteralContext::integerLiteral() {
  return getRuleContext<DaricParser::IntegerLiteralContext>(0);
}

DaricParser::StringLiteralContext* DaricParser::LiteralContext::stringLiteral() {
  return getRuleContext<DaricParser::StringLiteralContext>(0);
}


size_t DaricParser::LiteralContext::getRuleIndex() const {
  return DaricParser::RuleLiteral;
}


std::any DaricParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::LiteralContext* DaricParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 104, DaricParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(849);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(846);
      floatLiteral();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(847);
      integerLiteral();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(848);
      stringLiteral();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FloatLiteralContext ------------------------------------------------------------------

DaricParser::FloatLiteralContext::FloatLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::FloatLiteralContext::FLOATLITERAL() {
  return getToken(DaricParser::FLOATLITERAL, 0);
}

tree::TerminalNode* DaricParser::FloatLiteralContext::PLUS() {
  return getToken(DaricParser::PLUS, 0);
}

tree::TerminalNode* DaricParser::FloatLiteralContext::MINUS() {
  return getToken(DaricParser::MINUS, 0);
}


size_t DaricParser::FloatLiteralContext::getRuleIndex() const {
  return DaricParser::RuleFloatLiteral;
}


std::any DaricParser::FloatLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitFloatLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::FloatLiteralContext* DaricParser::floatLiteral() {
  FloatLiteralContext *_localctx = _tracker.createInstance<FloatLiteralContext>(_ctx, getState());
  enterRule(_localctx, 106, DaricParser::RuleFloatLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(852);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == DaricParser::PLUS

    || _la == DaricParser::MINUS) {
      setState(851);
      _la = _input->LA(1);
      if (!(_la == DaricParser::PLUS

      || _la == DaricParser::MINUS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(854);
    match(DaricParser::FLOATLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntegerLiteralContext ------------------------------------------------------------------

DaricParser::IntegerLiteralContext::IntegerLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::HEXNUMBER() {
  return getToken(DaricParser::HEXNUMBER, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::BINARYNUMBER() {
  return getToken(DaricParser::BINARYNUMBER, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::INTEGERLITERAL() {
  return getToken(DaricParser::INTEGERLITERAL, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::PLUS() {
  return getToken(DaricParser::PLUS, 0);
}

tree::TerminalNode* DaricParser::IntegerLiteralContext::MINUS() {
  return getToken(DaricParser::MINUS, 0);
}


size_t DaricParser::IntegerLiteralContext::getRuleIndex() const {
  return DaricParser::RuleIntegerLiteral;
}


std::any DaricParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::IntegerLiteralContext* DaricParser::integerLiteral() {
  IntegerLiteralContext *_localctx = _tracker.createInstance<IntegerLiteralContext>(_ctx, getState());
  enterRule(_localctx, 108, DaricParser::RuleIntegerLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(862);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case DaricParser::HEXNUMBER: {
        enterOuterAlt(_localctx, 1);
        setState(856);
        match(DaricParser::HEXNUMBER);
        break;
      }

      case DaricParser::BINARYNUMBER: {
        enterOuterAlt(_localctx, 2);
        setState(857);
        match(DaricParser::BINARYNUMBER);
        break;
      }

      case DaricParser::PLUS:
      case DaricParser::MINUS:
      case DaricParser::INTEGERLITERAL: {
        enterOuterAlt(_localctx, 3);
        setState(859);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == DaricParser::PLUS

        || _la == DaricParser::MINUS) {
          setState(858);
          _la = _input->LA(1);
          if (!(_la == DaricParser::PLUS

          || _la == DaricParser::MINUS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(861);
        match(DaricParser::INTEGERLITERAL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringLiteralContext ------------------------------------------------------------------

DaricParser::StringLiteralContext::StringLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* DaricParser::StringLiteralContext::STRINGLITERAL() {
  return getToken(DaricParser::STRINGLITERAL, 0);
}


size_t DaricParser::StringLiteralContext::getRuleIndex() const {
  return DaricParser::RuleStringLiteral;
}


std::any DaricParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<DaricVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}

DaricParser::StringLiteralContext* DaricParser::stringLiteral() {
  StringLiteralContext *_localctx = _tracker.createInstance<StringLiteralContext>(_ctx, getState());
  enterRule(_localctx, 110, DaricParser::RuleStringLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(864);
    match(DaricParser::STRINGLITERAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool DaricParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 49: return expressionSempred(antlrcpp::downCast<ExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool DaricParser::expressionSempred(ExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 18);
    case 1: return precpred(_ctx, 17);
    case 2: return precpred(_ctx, 16);
    case 3: return precpred(_ctx, 15);
    case 4: return precpred(_ctx, 14);
    case 5: return precpred(_ctx, 13);
    case 6: return precpred(_ctx, 12);
    case 7: return precpred(_ctx, 11);
    case 8: return precpred(_ctx, 10);
    case 9: return precpred(_ctx, 9);
    case 10: return precpred(_ctx, 8);
    case 11: return precpred(_ctx, 7);
    case 12: return precpred(_ctx, 6);
    case 13: return precpred(_ctx, 5);
    case 14: return precpred(_ctx, 4);
    case 15: return precpred(_ctx, 3);
    case 16: return precpred(_ctx, 2);
    case 17: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void DaricParser::initialize() {
  ::antlr4::internal::call_once(daricParserOnceFlag, daricParserInitialize);
}
